<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silentlight&#39;s blog</title>
  
  <subtitle>不想继续逃避现实了</subtitle>
  <link href="https://cloudnzk.github.io/atom.xml" rel="self"/>
  
  <link href="https://cloudnzk.github.io/"/>
  <updated>2025-03-30T09:35:07.985Z</updated>
  <id>https://cloudnzk.github.io/</id>
  
  <author>
    <name>Silentlight</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AI编程工具在编程课教学中的应用</title>
    <link href="https://cloudnzk.github.io/2025/03/30/AI-coding-share/"/>
    <id>https://cloudnzk.github.io/2025/03/30/AI-coding-share/</id>
    <published>2025-03-30T00:19:21.000Z</published>
    <updated>2025-03-30T09:35:07.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Author：黎家全，黄莹钧</p><p>From：计算机网络专业教研室</p></blockquote><p>前言：在上编程课的时候，教师除了需要制作上课PPT，还需要：</p><ul><li>提前开发好需要演示的项目代码，提供源码给学生学习</li><li>编写步骤详尽的实训指导书</li><li>在实训过程中给学生解决代码问题</li></ul><p>此时，若能使用AI编程工具辅助完成以上的工作，可以大大提高教师备课的效率。另外，也可以创作出更多的教学资源，为学生提供更丰富的学习资料。</p><h2 id="常用AI编程工具"><a href="#常用AI编程工具" class="headerlink" title="常用AI编程工具"></a>常用AI编程工具</h2><ul><li><p><a target="_blank" rel="noopener" href="https://www.cursor.com/cn">Cursor</a>，功能强大的代码生成神器，只不过要收费，每个月20美刀价格不菲。新注册用户可以免费试用14天专业版    </p><p><img src="https://s2.loli.net/2025/03/30/zeJ7xdlpTMXGgWt.png"></p></li><li><p><a target="_blank" rel="noopener" href="https://codeium.com/windsurf">Windsurf</a>：Cursor后出现的又一代码生成神器，价格比Cursor便宜，性价比更高</p><p><img src="https://s2.loli.net/2025/03/30/JLVPiFEpWUdDutA.png"></p></li><li><p><a target="_blank" rel="noopener" href="https://github.com/features/copilot">GitHub copilot</a>，作为插件集成在VScode中，提供免费试用。适合使用VScode作为主力开发工具的开发者</p><iframe height=498 width=100% src="https://files.catbox.moe/ucx2zx.mp4"></iframe></li><li><p>Trae，字节对标Cursor的竞品，内部集成了最新的Deepseek V3引擎。不如Cursor那般强大，但胜在免费！国内首个AI IDE！</p><p><video width="100%" preload="none" loop="" playsinline="" src="https://lf-cdn.trae.com.cn/obj/trae-com-cn/BuilderFinal.mp4" poster="https://lf-cdn.trae.com.cn/obj/trae-com-cn/BuilderFinal.webp" style="object-fit: cover; border-radius: 5.16px;"><source src="https://lf-cdn.trae.com.cn/obj/trae-com-cn/BuilderFinal.mp4" type="video/mp4">Your browser does not support HTML5 video tags.</video></p></li><li><p>V0.dev，能够快速生成前端代码，包括复刻前端界面、生成React组件等，在前端开发领域使用较多    </p><p><img src="https://s2.loli.net/2025/03/30/jzpZelmDgvE5XVS.png"></p></li><li><p>Deepseek，通用全能的大模型工具，开源免费。但提出的时间比较短，目前还未广泛集成到代码编辑器中，编程时需要将代码单独复制到编辑器中，有一点不方便。</p><p><img src="https://s2.loli.net/2025/03/30/bk1fdPevEx3BMOn.png"></p></li><li><p>除了上面的工具之外，知名的还有 <a target="_blank" rel="noopener" href="https://chatgpt.com/">ChatGPT</a>、<a target="_blank" rel="noopener" href="https://www.marscode.cn/">豆包MarsCode</a>、阿里的<a target="_blank" rel="noopener" href="https://lingma.aliyun.com/lingma">通义灵码</a>。感兴趣可以自行下载体验</p></li></ul><blockquote><p>下面以《Python Web技术》课程为例，演示AI工具的使用</p></blockquote><h2 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h2><p>教师不需要从头开发代码，只需要说出你的需求，就能给你写出能直接用来演示的代码：</p><p>例如，在《Python Web技术》的实训中，有这样一道编程题：</p><blockquote><p>求阶乘之和。一个正整数的阶乘（factorial）是所有小于及等于该数的正整数的积。例如3的阶乘是 3! = 1 * 2 * 3 = 6。求 1! + 2! + 3! + 4! + … + 9! + 10! ，并打印计算结果。</p></blockquote><h3 id="Cursor代码生成"><a href="#Cursor代码生成" class="headerlink" title="Cursor代码生成"></a>Cursor代码生成</h3><p>在 Cursor 中可以轻松生成这道题的参考代码，而且是直接在项目中生成，不用在聊天框复制过来非常方便。尤其是生成多个代码文件的时候，更能感受到这种便利性。</p><p><img src="https://s2.loli.net/2025/03/30/JljaeZSKh4R95Fb.png"></p><p>生成的代码如果觉得满意，就Accept。否则Reject</p><p>生成后能直接运行代码，也能根据自己的需要对代码做进一步的修改：</p><p><img src="https://s2.loli.net/2025/03/30/RnqWyKsdV7v4Dk1.png"></p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>可以看到生成的代码求阶乘时用了递归算法实现。递归法需要消耗的栈资源较多且效率较慢，因此还可以优化这里的代码，使用动态规划算法实现：</p><ol><li>在 Cursor 中选中需要优化的代码片段，然后点击Edit</li></ol><p><img src="https://s2.loli.net/2025/03/30/LmohgBkyvVl19SE.png"></p><ol start="2"><li>在弹出的窗口中输入你的需求，进行此处的代码优化</li></ol><p><img src="https://s2.loli.net/2025/03/30/ew482Dj7Nl6t1kS.png"></p><ol start="3"><li>最后生成了满意的代码，操作全部在编辑器中完成，非常方便！</li></ol><p><img src="https://s2.loli.net/2025/03/30/GkRqLbBoSJNwMTv.png"></p><h2 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h2><p>代码补全在编程开发中非常有用，能够减少重复代码的编写，提高开发的效率。</p><p>下面以<code>GitHub copilot</code>举例代码补全功能，可以参考官方文档来完成</p><blockquote><p><a target="_blank" rel="noopener" href="https://vscode.js.cn/docs/copilot/ai-powered-suggestions">https://vscode.js.cn/docs/copilot/ai-powered-suggestions</a></p></blockquote><ol><li>先在VScode中安装 <code>GitHub copilot</code> 插件</li><li>登录GitHub的账号</li><li>在VSCode编辑器中键入代码，<code>GitHub copilot</code> 会给出代码补全的建议，按下 <code>Tab</code> 键即可自动补全</li></ol><p><img src="https://s2.loli.net/2025/03/30/UMcj6gaFkApxhwr.png" alt="2025-03-30 14.02.29.png"></p><h2 id="前端demo生成"><a href="#前端demo生成" class="headerlink" title="前端demo生成"></a>前端demo生成</h2><p>能够快速生成直接可用的前端代码，只需根据自己的<strong>需求</strong>稍加修改，即可在课堂上<strong>演示</strong>。</p><p>例如，使用 <code>V0.dev</code> 仿照GitHub的登录页面，生成用户登录的前端代码：只需要在输入框中输入网址：<a target="_blank" rel="noopener" href="https://github.com/login">https://github.com/login</a></p><p><img src="https://s2.loli.net/2025/03/30/lUwj1ATuFxnKSoP.png"></p><p><code>V0.dev</code> 就会自动截图，并生成前端界面代码，支持实时预览。生成的效果如下所示，可以看到还原度非常之高</p><p><img src="https://s2.loli.net/2025/03/30/37VMuWSZaCX65oh.png"></p><p>生成的代码的技术栈为React、Typescript、TailwindCSS，如下所示：</p><p><img src="https://s2.loli.net/2025/03/30/12qjWMlTPNu8KBI.png"></p><p>如果你想要生成 Vue 的代码，可以在聊天框中说明，<code>V0.dev</code>会帮你重新生成代码：</p><p><img src="https://s2.loli.net/2025/03/30/1PyeHOAhvkazg5F.png"></p><h2 id="文档生成"><a href="#文档生成" class="headerlink" title="文档生成"></a>文档生成</h2><p>只需提供一份大纲（框架），就能为你生成包括代码在内的详细实训文档</p><p>下面以字节的 <code>Trae</code> 为例，输入《Python Web技术》课程的实训大纲，生成实训的操作文档：</p><ol><li>传入大纲，并输入prompt指令进行提问</li></ol><pre class="line-numbers language-none"><code class="language-none">帮我生成一份实训指导书，主题为表单处理实战。实训会使用到 Flask 框架中的 Flask-WTF 实现表单处理的过程。下面给出了实训的大纲，请根据这份大纲为我生成包括代码和原理解释在内的详细的实训文档：1.定义一个 ArticleForm 表单类，在类中实现三个表单控件：文章标题单行文本框、文章内容多行文本框、提交按钮。要求依次命名为title、content和submit2.渲染表单。根据表单类定义的表单结构，将表单渲染到页面上。3.接收表单数据及返回响应。点击新增按钮后，在一个新页面展示表单填写的内容（文章标题和文章内容）4.数据验证。要求验证文章标题和文章内容均不得为空，并且验证文章标题的长度小于20个字。如果文章标题（内容）为空，利用消息反馈给用户提示一条警告消息：“文章标题（内容）不得为空。如果文章标题的长度大于20，则利用消息反馈给用户提示一条警告消息：“文章标题的长度不得超过20”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2025/03/30/s27LgYvPtDMiwmu.png"></p><ol start="2"><li>获得实训文档，同时可直接将生成的代码保存到现有项目中</li></ol><p><img src="https://s2.loli.net/2025/03/30/XUKv29Dx3VwisAZ.png"></p><h2 id="代码纠错"><a href="#代码纠错" class="headerlink" title="代码纠错"></a>代码纠错</h2><p>学生可以借助 <code>Deepseek</code> 轻松实现代码纠错，找出程序出错的原因。减轻教师指导的负担。</p><p>例如学生在实训中遇到了一个 <code>NameError: name &#39;a&#39; is not defined</code> 的报错，出错代码为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token keyword">if</span> a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入的数应该大于等于0'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么可以直接将代码和报错一同送入到 <code>Deepseek</code> 中：</p><pre class="line-numbers language-none"><code class="language-none">我在运行Python代码的时候遇到了这个错误：NameError: name &#39;a&#39; is not defined。请帮我分析代码出错的原因以及纠正错误的代码代码如下：print(&#39;hello world&#39;)if a &lt; 0:  print(&#39;输入的数应该大于等于0&#39;)else:  print(a)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2025/03/30/W2HbhRjNXZMw5qP.png"></p><p>可以发现，<code>Deepseek</code> 为我们指出了代码出错的位置并给出了改正方案：</p><p><img src="https://s2.loli.net/2025/03/30/3bVaOr8Y7iKgCpD.png"></p><h2 id="寄语"><a href="#寄语" class="headerlink" title="寄语"></a>寄语</h2><blockquote><p>Don’t resist the change. Open yourself to new possibilities.</p><p>不要抗拒改变。敞开心扉迎接新的可能性。</p></blockquote><p>在AI时代的洪流中顺势而为，积极拥抱AI。一方面，探索AI工具在教学方面的应用，享受新技术带给我们的便利。另一方面应当保持独立思考，不能过于依赖AI工具而忽视了自身技术能力的提高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Author：黎家全，黄莹钧&lt;/p&gt;
&lt;p&gt;From：计算机网络专业教研室&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前言：在上编程课的时候，教师除了需要制作上课PPT，还需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提前开发好需要演示的项目代码，提供源码给学</summary>
      
    
    
    
    <category term="技术" scheme="https://cloudnzk.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="编程" scheme="https://cloudnzk.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="AI" scheme="https://cloudnzk.github.io/tags/AI/"/>
    
    <category term="教学" scheme="https://cloudnzk.github.io/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="分享" scheme="https://cloudnzk.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>2025重启博客</title>
    <link href="https://cloudnzk.github.io/2025/03/29/blog-restart/"/>
    <id>https://cloudnzk.github.io/2025/03/29/blog-restart/</id>
    <published>2025-03-29T10:04:19.000Z</published>
    <updated>2025-03-29T11:25:18.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="List："><a href="#List：" class="headerlink" title="List："></a>List：</h2><ul><li>更换了一个新的主题<a target="_blank" rel="noopener" href="https://github.com/probberechts/hexo-theme-cactus">cactus</a>，能够更加专注于写作</li><li>把之前做的笔记都整理好放上来，便于管理和回顾</li><li>博客全部使用MD格式编写，质量还行的文章可以很方便地转载到其他平台</li><li>持续输出，一开始先把量堆上去。写多了之后自然就会写</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;List：&quot;&gt;&lt;a href=&quot;#List：&quot; class=&quot;headerlink&quot; title=&quot;List：&quot;&gt;&lt;/a&gt;List：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;更换了一个新的主题&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;htt</summary>
      
    
    
    
    <category term="随笔" scheme="https://cloudnzk.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Hexo" scheme="https://cloudnzk.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://cloudnzk.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>AI生成教学资源案例</title>
    <link href="https://cloudnzk.github.io/2025/03/05/AI-teaching-resource-generate-share/"/>
    <id>https://cloudnzk.github.io/2025/03/05/AI-teaching-resource-generate-share/</id>
    <published>2025-03-05T01:47:55.000Z</published>
    <updated>2025-03-30T08:14:07.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h1><p>在传统的教学工作中，教师需要备课写教案、做PPT，或者有录微课的需求。如果单纯使用全人工的方式，费时费力且效率低下。因此，将当前最先进的AI技术或工具应用到我们的教学工作中，可以大大提高教师的工作效率。例如，采用AI自动化生成结合人工润色修改的方式，来制作教案、PPT、微课视频等。</p><p>下面展示了一个应用案例。该案例完全使用AI自动化一键生成，并没有经过人工的修改。可以看到，AI生成的内容质量较高。如果再经过一些人工修改，就能满足教学的需要。</p><h1 id="能够解决的痛点-问题"><a href="#能够解决的痛点-问题" class="headerlink" title="能够解决的痛点/问题"></a>能够解决的痛点/问题</h1><ul><li>解放教师生产力，自动化重复性工作</li><li>能够为学生提供更丰富的学习资源，例如微课视频</li></ul><h1 id="利用AI的优点和问题"><a href="#利用AI的优点和问题" class="headerlink" title="利用AI的优点和问题"></a>利用AI的优点和问题</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>自动化生成，效率很高，节省了教师网上搜资料整理的时间</li><li>生成的内容质量较高，而且内容丰富，知识覆盖面广</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul><li>内容质量问题。即生成的内容可能有一些不是我们想要的，需要经过人工修改。如何让AI工具能够更好地理解我们的需求，从而降低人工修改的成本？</li><li>如何更好地利用AI工具与AI工具的协作，优化生成内容的流程？</li></ul><h1 id="第一步：deepseek生成PPT文案"><a href="#第一步：deepseek生成PPT文案" class="headerlink" title="第一步：deepseek生成PPT文案"></a>第一步：deepseek生成PPT文案</h1><p><img src="https://s2.loli.net/2025/03/30/PSEyi2BHogKnxhT.png"></p><p>生成的文件如下：</p><p><a target="_blank" rel="noopener" href="https://docs.qq.com/doc/DTWZTYU9icFlnVUx1">https://docs.qq.com/doc/DTWZTYU9icFlnVUx1</a></p><h1 id="第二步：根据文案生成PPT"><a href="#第二步：根据文案生成PPT" class="headerlink" title="第二步：根据文案生成PPT"></a>第二步：根据文案生成PPT</h1><p>上传第一步deepseek生成的PPT文案，可以直接由文本生成PPT幻灯片</p><p><img src="https://s2.loli.net/2025/03/30/M9kAFjKZPJSxyhD.png"></p><p>生成的PPT如下：</p><p><a target="_blank" rel="noopener" href="https://docs.qq.com/slide/DTUxNSWZESWpBUFRm">https://docs.qq.com/slide/DTUxNSWZESWpBUFRm</a></p><p>智谱清言每天只有一次免费生成。可以使用Kimi生成PPT，Kimi是免费无限制使用的</p><h1 id="第三步：AI-studios-数字人讲解PPT"><a href="#第三步：AI-studios-数字人讲解PPT" class="headerlink" title="第三步：AI studios 数字人讲解PPT"></a>第三步：AI studios 数字人讲解PPT</h1><p>将生成的PPT送入 AI studios，可以用PPT生成一段教学微课</p><p><img src="https://s2.loli.net/2025/03/30/65vfzoBGUiVkACJ.png"></p><p>下面是根据PPT生成的视频：</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=114248881670347&bvid=BV1ctZvYREZP&cid=29141108875&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="400px"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h1&gt;&lt;p&gt;在传统的教学工作中，教师需要备课写教案、做PPT，或者有录微课的需求。如果单纯使用全人工的方式，费时费力且效率低下。因此，将</summary>
      
    
    
    
    <category term="教程" scheme="https://cloudnzk.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="AI" scheme="https://cloudnzk.github.io/tags/AI/"/>
    
    <category term="教学" scheme="https://cloudnzk.github.io/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="分享" scheme="https://cloudnzk.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>免费图床推荐</title>
    <link href="https://cloudnzk.github.io/2024/11/10/free-picture-bed/"/>
    <id>https://cloudnzk.github.io/2024/11/10/free-picture-bed/</id>
    <published>2024-11-10T12:30:40.000Z</published>
    <updated>2025-03-29T12:35:55.080Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>免费图床只适合临时使用的场景（例如在班固米论坛发图），因为免费图床服务都存在跑路倒闭的可能性。长期使用还是选阿里云或者腾讯云的对象存储吧，买个存储包一年也就10块钱，平时同步自己的笔记其实也用不了多少流量。==数据无价，免费的才是最贵的。==</p></blockquote><h2 id="SM-MS"><a href="#SM-MS" class="headerlink" title="SM.MS"></a>SM.MS</h2><p>速度平均在 100~150ms 之间，如果只能选一个图床用，我首先推荐它。稳定性好，在 v2ex 发布，在国内用的人也很多，不用担心跑路。 图片大小限制在5MB内。</p><p><img src="https://s2.loli.net/2024/11/10/w8MHlBfiqvbejUD.png" alt="截屏2024-11-10 13.34.33.png"></p><h2 id="IMG-TG"><a href="#IMG-TG" class="headerlink" title="IMG.TG"></a>IMG.TG</h2><p>有免费版和收费版，免费版控制了上传的频率。在国内访问的速度是4个里面最快的。可以作为SM.MS的替补。19年稳定运营至今，不过做图床太烧钱了，还是有跑路的可能性…另外 IMG.TG 没有 PicGo 的插件，使用就没那么便利了。图片大小限制在5MB内</p><p><img src="https://s2.loli.net/2024/11/10/JyP1dNDxEgscaTu.png" alt="截屏2024-11-10 13.15.16.png"></p><h2 id="ImgBB"><a href="#ImgBB" class="headerlink" title="ImgBB"></a>ImgBB</h2><p>国外图床，速度没有上面两个快，免费版的图片有时候会给你显示缩略图。自己记笔记可以用用，用来做博客的图床就不推荐了。唯一的优点是老牌图床比较稳定，不会马上就删库跑路的那种。最大可以传32MB内的图片。</p><p><img src="https://s2.loli.net/2024/11/10/kHzomGl5DPtwhBf.png" alt="截屏2024-11-10 13.27.03.png"></p><h2 id="catbox"><a href="#catbox" class="headerlink" title="catbox"></a>catbox</h2><p>猫箱是一个国外的图床，不仅可以传图片，还可以传其他类型的文件，最大200MB！但缺点是在国内随时可能会被墙，这种事情谁都说不定。没有 PicGo 的插件。</p><p><img src="https://s2.loli.net/2024/11/10/Lx48ufswr261Ggq.png" alt="截屏2024-11-10 12.07.39.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;免费图床只适合临时使用的场景（例如在班固米论坛发图），因为免费图床服务都存在跑路倒闭的可能性。长期使用还是选阿里云或者腾讯云的对象存储吧，买个存储包一年也就10块钱，平时同步自己的笔记其实也用不了多少流量。==数据无价，免费的才是最贵的。==&lt;/p</summary>
      
    
    
    
    <category term="软件" scheme="https://cloudnzk.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="图床" scheme="https://cloudnzk.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>Python入门推荐资料</title>
    <link href="https://cloudnzk.github.io/2023/07/29/python-start/"/>
    <id>https://cloudnzk.github.io/2023/07/29/python-start/</id>
    <published>2023-07-29T11:55:09.000Z</published>
    <updated>2025-03-29T12:04:22.317Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写这篇的原因是：老有人问我Python入门推荐什么资料。问到了就直接发这篇给他。</p></blockquote><h2 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h2><p>Python编程 从入门到实践 ，这本适合入门</p><h2 id="看文档学习"><a href="#看文档学习" class="headerlink" title="看文档学习"></a>看文档学习</h2><ol><li>廖雪峰的Python教程，对小白很友好</li><li>菜鸟教程</li><li>Python官方文档。不懂的可以来查查文档，虽然说我一直都是谷歌搜</li><li>Python - 100天从新手到大师，<a target="_blank" rel="noopener" href="https://github.com/jackfrued/Python-100-Days">https://github.com/jackfrued/Python-100-Days</a></li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><p>freecodecamp，<a target="_blank" rel="noopener" href="https://www.freecodecamp.org/chinese/learn/scientific-computing-with-python/">https://www.freecodecamp.org/chinese/learn/scientific-computing-with-python/</a></p></li><li><p>GitHub上也有很多，可以找找。做点练习好一点，不然看了也不会用</p></li></ol><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ol><li>B站上有很多好的视频，直接选播放量高的看</li><li>中国大学MOOC，学院派。像我之前看过一个北理工的还行。<a target="_blank" rel="noopener" href="https://www.icourse163.org/course/BIT-268001?from=searchPage&amp;outVendor=zw_mooc_pcssjg_#/info">https://www.icourse163.org/course/BIT-268001?from=searchPage&amp;outVendor=zw_mooc_pcssjg_#/info</a></li><li>英文好的可以去找找国外课程，YouTube就有很多，而且质量比国内的高</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;写这篇的原因是：老有人问我Python入门推荐什么资料。问到了就直接发这篇给他。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;书籍&quot;&gt;&lt;a href=&quot;#书籍&quot; class=&quot;headerlink&quot; title=&quot;书籍&quot;&gt;&lt;/a&gt;书籍&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>研究生期间的经验教训总结</title>
    <link href="https://cloudnzk.github.io/2023/05/28/summary-postgraduate/"/>
    <id>https://cloudnzk.github.io/2023/05/28/summary-postgraduate/</id>
    <published>2023-05-28T11:32:28.000Z</published>
    <updated>2025-03-29T11:48:57.565Z</updated>
    
    <content type="html"><![CDATA[<p>在度过人生的每一阶段后，都会尝试记录一些东西，作为经历过的证明。一方面写给未来的自己看，留作回忆，另一方面也写给后来人看，希望能给他们一些启发，少走一些弯路。</p><p>由于本人文笔不好，并且很懒，所以不写煽情的文字，不写长篇大论。只写实用的要点，想到什么就写什么。</p><h2 id="研一篇"><a href="#研一篇" class="headerlink" title="研一篇"></a>研一篇</h2><ol><li>大多数课好像都没什么用，硬要说的话…<strong>算法设计与分析</strong>、计算机网络对以后找工作用处最大。神经网络与应用，工程数学，论文写作指导这些对搞科研也有点用处，如果能在研一把<strong>深度学习</strong>、<strong>机器翻译</strong>和<strong>数学基础</strong>这些学好，个人觉得用处很大；</li><li>最后悔的事情是，研一在课堂上浪费了不少时间（<del>玩手机</del>）。如果可以的话，要么好好听课，要么用平板学习自己科研方向的东西，专注一些；</li><li>个人认为，在研一阶段，打好<code>基础</code>是最重要的。何为基础？可以问问老师哈哈哈，I don’t know too.</li></ol><h2 id="研二篇"><a href="#研二篇" class="headerlink" title="研二篇"></a>研二篇</h2><ol><li>小论文碰到拒稿也不要灰心，失败乃是人生的常态是也。可以根据修改意见<code>进一步修改</code>，转投其他期刊会议；</li><li>小论文录用了并不是结束，而是刚刚开始。后面该开始做毕业论文啦；</li><li>秋招的时候，找到科研与找工作的平衡点。在找工作的期间<code>不要忘记了科研</code>啊，抽时间读论文做实验跟找工作并不冲突；</li><li>我当时是10月底才开始做毕设实验，实在是太晚了！后面做论文也太赶差点就延毕了。<code>毕不了业，找到工作也没用</code>；</li><li>总之在这个阶段<code>不要太混</code>。太懒，太摆烂的话后面可是要吃大亏的</li></ol><h2 id="科研篇"><a href="#科研篇" class="headerlink" title="科研篇"></a>科研篇</h2><ol><li><code>及早准备，尽量逼着自己往前赶</code>。越早入门越好，越早找到科研方向越好，越早做完实验越好。永远别想着把所有的知识或基础都学完，才着手科研，很多东西都是一边实践一边学习得到的；</li><li>无论是搞科研还是干其他什么事情，<code>踏踏实实</code>才是真。我在做科研的时候还是过于浮躁了，太难的事情总是不肯做，所以到最后的毕业论文阶段坎坷不断啊…</li><li>要摆正做科研的态度，<code>认真上心</code>起来啊，尽量收起那种玩乐的心理。做科研很耗费时间和精力，要花很多时间去尝试才能得到想要的结果，所以得沉下心去做事情；</li><li>如果可以的话，<code>多跟别人交流</code>。同门也好同学也好老师也好，与人交流能打开你的思路，闭塞的话会兜兜转转很久；</li><li><code>多看论文</code>。如果缺乏idea或者思路，一定是论文看少了；</li><li>选择一个适宜科研的<code>环境</code>。除了实验室之外，图书馆也是很推荐的。改论文的时候我在图书馆蹲了一两个月，个人比较喜欢那里的氛围，安静不吵，能够沉浸在自己的世界中；</li><li><code>不要害怕尝试，不要害怕失败，不要只想不做</code>。像做菜一样，没有人一开始就能学会所有东西，都是靠不断地去试不断去做，锻炼得到的；</li><li>学会<code>做好规划/计划</code>，一步一个脚印。循序渐进，一个阶段做好一个阶段的事情</li><li>无论是做科研还是学习，保持<code>专注沉浸</code>的状态，尽量不被其他东西干扰。这种状态我现在也没达到，慢慢来吧，毕竟做科研也是一件很枯燥的事情啊…</li></ol><h2 id="毕业论文篇"><a href="#毕业论文篇" class="headerlink" title="毕业论文篇"></a>毕业论文篇</h2><ol><li>时间点：<strong>论文预评审</strong> 2月底下旬，<strong>论文盲审提交</strong> 3月下旬，<strong>论文盲审送审</strong> 4月中旬，<strong>论文修改</strong> 4月下旬，<strong>论文答辩</strong> 5月上旬/中旬；</li><li>写的时候，可以<code>参考别人</code>的硕士论文看看怎么写的；</li><li><code>早点交初稿</code>，一开始不要太过于追求质量，毕业论文都是改出来的；早点写完初稿给老师看，后面才会有修改的时间啊；</li><li><code>战胜拖延症</code>，虽然说deadline是第一生产力，但那是在刀尖的边缘，在悬崖的边上跳舞；</li><li>尽早，<code>积极主动跟老师交流</code>论文修改；</li><li>盲审提交前可以使用<strong>知网个人查重</strong>，挺准的，1.5元/千字，论文重复率要求<code>小于10%</code>；</li><li>写论文前做好知识储备，<code>厚积薄发</code>；实验这些都做好，模型原理都搞清楚，就好写了。如果并不是这样（类似我），前面欠的债后面很难补上；</li><li><code>不要存在侥幸心理</code>，工作量不足/研究不够深入/没有创新点放到严格的老师那里，是有可能会被毙掉的。毕业有很多关要闯，你运气好过了这关，下一关你运气还有没有那么好就不知道了；</li><li>在这个阶段会很辛苦，赶毕业论文的时候熬夜可能是常态。请<code>坚持下去！</code>压力往往会激发你的潜力，在这样巨大的压力下我已经崩溃过很多回了，有时候想过很多次主动延毕，但也不是咬咬牙坚持下来了吗？如果主动放弃了才是真正令人后悔的事情。</li></ol><h2 id="盲审篇"><a href="#盲审篇" class="headerlink" title="盲审篇"></a>盲审篇</h2><p>经历这次盲审，给我的体会是：</p><ol><li>运气真的很重要。自己的运气真的蛮好，一没抽到教育部盲审，二没被送到专门做这方面的同行老师的手上；</li><li>对专硕而言，创新点不是最重要的，工作量和逻辑才是最重要的；（这点看情况，不排除碰到严格的老师看重创新这点）</li><li>格式也很重要，体现的是你的态度。弄好格式至少能给老师多点印象分；</li><li>如果不想被送到同样做这个小方向的老师手上，作者研究方向可以写泛一点，因为是根据这个分配老师的；</li><li>论文提交送审了就别胡思乱想了，该玩就玩等结果就行。尽人事，听天命。</li></ol><h2 id="预答辩篇"><a href="#预答辩篇" class="headerlink" title="预答辩篇"></a>预答辩篇</h2><p>做好充足的准备能增加你的信心，提前演练能让你预料到可能发生的情况，并在正式的答辩中做得更好</p><h3 id="做PPT"><a href="#做PPT" class="headerlink" title="做PPT"></a>做PPT</h3><p>准备答辩的第一件事就是做 PPT 了。做 PPT 其实很快，一两天即可，在完成预答辩后还需要对 PPT 做一定的修改。</p><ol><li>按照答辩的时长控制 PPT 的<code>页数</code>。对硕士研究生而言，15分钟的演讲20~30张即可；</li><li>内容编排方面，要有<code>逻辑</code>形成上下环环相扣的感觉，可以按照下面的脉络进行：1.研究背景和意义（为什么做），2.研究内容（针对研究问题应该从哪几个方面改进，这里列一下大纲即可，在研究方法那里再展开讲），3.研究方法（做了什么），4.研究结果（得到了什么实验结果或者结论）</li><li>内容做到<code>详略得当</code>，研究背景与意义，研究内容这些一张即可，不必长篇大论。重点是看你做了什么东西，怎么做的。</li><li>PPT 做成<code>简洁风格</code>，不要用花里胡哨的主题，也不要用动画，纯属浪费时间；</li><li>好的 PPT 应该是图文结合，不要放密密麻麻的文字，只需放<code>key point</code>（重点）的文字即可；</li><li>PPT <code>字体</code>个人推荐的是微软雅黑，字体大小方面：标题28，正文16或18，根据你的文字多少灵活调整；</li></ol><h3 id="讲PPT"><a href="#讲PPT" class="headerlink" title="讲PPT"></a>讲PPT</h3><p>做到<code>有逻辑</code>。 PPT 只能说要<code>多多练习</code>吧，多练习才能找到感觉，其实没什么技巧。</p><ol><li><p>参加<strong>预答辩</strong>，在老师面前讲一遍，根据老师的建议回去调整；</p></li><li><p>自己<strong>排练计时</strong>练习，完整地讲一遍。后面可以挑讲得不好的部分再练习；</p></li><li><p>不用把PPT的全部内容都念出来，亦不用事无巨细地讲，<code>讲重点</code>的就OK了；</p></li><li><p>如果自己不能确定的东西，最好避开不讲或者简略地跳过，不要暴露你的漏洞；</p></li><li><p>如果 PPT 的<strong>逻辑</strong>或结构编排有问题，请及时<code>调整</code>。切记：是PPT将就人而不是人将就PPT；</p></li><li><p>在自己演练的过程，可以把讲的内容写成一篇<strong>答辩稿</strong>。到时候直接背答辩稿就可以了</p></li></ol><h3 id="答辩前的准备"><a href="#答辩前的准备" class="headerlink" title="答辩前的准备"></a>答辩前的准备</h3><p>答辩最重要的还是最后的提问环节，老师也是根据你的<code>论文质量</code>，<code>你的回答</code>来给你打分的。</p><ol><li><p>答辩之前要多看几遍自己的论文，一定要<code>熟悉自己的论文！</code></p></li><li><p><code>提前想好会被问到的问题</code>，提前想好怎么去应对；</p></li><li><p>记得答辩前一天准备好所有要提交的材料，把答辩 PPT 放进U盘里，避免到时候手忙脚乱；</p></li><li><p>注意下自己的形象，男生记得刮胡子，理下发看起来清爽一些，女生画点淡妆也是可以的。衣服没有要求，简洁干净即可。</p></li><li><p>最后保持一颗<strong>平常心</strong>就行，自信地上吧！</p></li></ol><h2 id="答辩篇"><a href="#答辩篇" class="headerlink" title="答辩篇"></a>答辩篇</h2><ol><li><code>只答不辩，疯狂道歉</code>是基本原则</li><li>答辩最重要的是后面的<code>回答环节</code>，所以一定要<code>熟悉你的论文内容</code>，不能一问三不知</li><li>讲PPT不是很重要，因为老师在你讲的过程中一直在翻看论文。所以只需要较为<code>流畅地在规定时间内讲完</code>就行了</li><li>面带微笑，保持谦虚有礼貌的态度</li><li>保持<code>自信</code>，声音洪亮</li><li>第一个答辩也不用紧张，<code>提前做好准备</code>什么都不怕。这时候老师还没进入状态，而且没有参照的人，因此不过的概率真的很小</li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ol><li>不要以为时间还有很多，其实后面还有很多东西要忙。“你将遇到的不幸、是你所蹉跎时间的报应”</li><li>不要把时间浪费在无意义的事情上，时光短暂。早上睡了很多懒觉真的挺后悔，如果可以重来，我想成为一个<code>自律</code>的人啊；</li><li>迭代思维：慢慢完善，并非一蹴而就；在做毕业论文的时候体会到的；</li><li>缓存思维：人所能处理的信息是有限的，把最重要的部分记录下来；在做笔记的时候体会到的；</li><li>实践思维：自己动手做了，才是你的东西；在学习前端的时候体会到的；</li><li>读研是一件没有标准答案的事情，但无论如何都会有结果，好结果 or 坏结果取决于你自己。不要跟别人比较，每个人都有属于自己的步调。规划好你自己的道路，做好自己手头的事情；</li><li>唯有努力不可辜负，努力过就一定会有收获</li></ol><h2 id="推荐的动漫"><a href="#推荐的动漫" class="headerlink" title="推荐的动漫"></a>推荐的动漫</h2><p>在研究生期间对我影响很深的动漫，相信也能对你有一些启发</p><ol><li>四叠半神话大系</li><li>3月的狮子（一二季）</li><li>虫师</li><li>蜂蜜与四叶草</li><li>CLANNAD</li><li>银魂</li></ol><h2 id="最后的寄语"><a href="#最后的寄语" class="headerlink" title="最后的寄语"></a>最后的寄语</h2><p>珍惜你最后的研究生生活，去完成更多有意义的事情。不断追求改变也好，按部就班完成毕业任务也好，趁你现在还有时间…</p><blockquote><p>记于即将毕业之际，2023.05.28，昆明. written by silentlight</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在度过人生的每一阶段后，都会尝试记录一些东西，作为经历过的证明。一方面写给未来的自己看，留作回忆，另一方面也写给后来人看，希望能给他们一些启发，少走一些弯路。&lt;/p&gt;
&lt;p&gt;由于本人文笔不好，并且很懒，所以不写煽情的文字，不写长篇大论。只写实用的要点，想到什么就写什么。&lt;/</summary>
      
    
    
    
    <category term="经验" scheme="https://cloudnzk.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="科研" scheme="https://cloudnzk.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
    <category term="总结" scheme="https://cloudnzk.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>盘点使用过的图床</title>
    <link href="https://cloudnzk.github.io/2023/05/28/picture-bed-summary/"/>
    <id>https://cloudnzk.github.io/2023/05/28/picture-bed-summary/</id>
    <published>2023-05-28T04:46:45.000Z</published>
    <updated>2023-06-11T12:04:54.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盘点使用过的图床"><a href="#盘点使用过的图床" class="headerlink" title="盘点使用过的图床"></a>盘点使用过的图床</h1><p>由于平时偶尔会写写博客，所以使用过很多的图床工具，在文章里展示图片。下面总结了一下使用过的图床工具。</p><p>挑选图床工具通常需要考虑三个因素：<code>价格</code>、<code>稳定性</code>和<code>访问速度</code>。三者不可兼得，如果要求图片稳定不丢失而且访问速度快的，一般都要充值</p><table><thead><tr><th>图床名称</th><th>收费与否</th><th>稳定性</th><th>访问速度</th><th>部署难度</th><th>是否支持PicGo</th></tr></thead><tbody><tr><td>阿里OSS</td><td>按量计费或购买资源包</td><td>高</td><td>快</td><td>较难</td><td>是</td></tr><tr><td>七牛云</td><td>10GB免费额度</td><td>高</td><td>快</td><td>较难</td><td>是</td></tr><tr><td>SM.MS</td><td>5GB免费额度</td><td>较高</td><td>较快</td><td>简单</td><td>是</td></tr><tr><td>路过</td><td>免费</td><td>中等</td><td>较快</td><td>简单</td><td>否</td></tr><tr><td>GitHub</td><td>免费</td><td>高</td><td>慢</td><td>中等</td><td>是</td></tr></tbody></table><h2 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h2><ul><li>个人目前正在使用的一个图床工具，价格便宜，对于<code>访问量小</code>的博客站非常适合。收费 = <code>存储费用</code> + <code>流量费用</code> + <code>请求费用</code>。</li><li>存储费用分为两种计费方式：第一种是<code>按量计费</code>，0.12每月每GB；第二种是买<code>资源包</code>，9块40GB一年，还是挺划算的。</li><li>流量费用是 00:00-08:00（闲时）：0.25元/GB，08:00-24:00（忙时）：0.50元/GB</li><li>请求费用：请求次数×0.01÷10000，每万次请求0.01元，对于小站而言几乎可以忽略不计</li><li>类似的产品还有<code>腾讯云COS</code>，没用过就不做评价了</li></ul><h2 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h2><ul><li>身份认证后可以获得每月10GB的免费存储额度，可以白嫖</li><li>但需要注意的是，需要<code>自备域名</code>。否则等30天测试域名到期后，上传的文件会自动清空</li></ul><h2 id="SM-MS"><a href="#SM-MS" class="headerlink" title="SM.MS"></a>SM.MS</h2><ul><li>个人比较喜欢，最常用的一个<code>免费图床</code>，提供免费5GB的存储额度，其实也够用了</li><li>在国内的访问稳定性不能确定，未来有被封锁或者开发者跑路的可能性，但可能性也比较小，因为这个图床已经稳定运行8年多了。目前SM.MS提供了中国国内的专用域名，在国内也能正常访问</li></ul><h2 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a>路过图床</h2><ul><li>上传的图片有可能被删除，解释权完全在于服务提供者的手上。而且登录账户居然找不到以前上传过的图片…避雷</li><li>所以想要长期存储的就别用这个了，上传一些<code>临时</code>图片可以试用下</li></ul><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><ul><li>由于 SM.MS 白嫖版限制图片最大5MB，所以超过5MB的我都上传到GitHub上</li><li>优点是完全免费，上传的图片不用害怕丢失，但缺点在于用国内网络访问实在是太<code>慢</code>了！</li></ul><hr><h2 id="免费图床推荐"><a href="#免费图床推荐" class="headerlink" title="免费图床推荐"></a>免费图床推荐</h2><h3 id="Catbox"><a href="#Catbox" class="headerlink" title="Catbox"></a>Catbox</h3><ul><li>国外网站，已经稳定运行了8年之久</li><li>完全免费，可以白嫖。速度尚可</li><li>没有空间限制，最大上传200MB以内文件</li><li>负面消息：曾经屏蔽了大陆的IP</li></ul><h3 id="Imgbb"><a href="#Imgbb" class="headerlink" title="Imgbb"></a>Imgbb</h3><ul><li>国外图床网站，至少稳定运行了5年以上</li><li>完全免费，可以白嫖。速度一般，要求速度的建议用国内的CDN图床</li><li>没有空间限制，最大上传32MB以内的图片</li><li>对图片内容比较宽松，随便发涩图</li></ul><h3 id="流浪图床"><a href="#流浪图床" class="headerlink" title="流浪图床"></a>流浪图床</h3><ul><li>班友们喜欢用的一个图床，胜在免费可以白嫖</li><li>没有空间限制，最大上传5MB以内的图片</li><li>提供者是个人开发者，完全是为爱发电，稳定性未知</li></ul><blockquote><p>如果还有好用的图床，也可以在评论区推荐给我哦~</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;盘点使用过的图床&quot;&gt;&lt;a href=&quot;#盘点使用过的图床&quot; class=&quot;headerlink&quot; title=&quot;盘点使用过的图床&quot;&gt;&lt;/a&gt;盘点使用过的图床&lt;/h1&gt;&lt;p&gt;由于平时偶尔会写写博客，所以使用过很多的图床工具，在文章里展示图片。下面总结了一下使用过的图</summary>
      
    
    
    
    <category term="软件" scheme="https://cloudnzk.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="图床" scheme="https://cloudnzk.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="实用工具" scheme="https://cloudnzk.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="盘点" scheme="https://cloudnzk.github.io/tags/%E7%9B%98%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 热题 HOT 100 百日刷题打卡</title>
    <link href="https://cloudnzk.github.io/2022/12/08/leetcode-hot-100-notebook/"/>
    <id>https://cloudnzk.github.io/2022/12/08/leetcode-hot-100-notebook/</id>
    <published>2022-12-07T17:38:12.000Z</published>
    <updated>2022-12-12T08:37:22.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刷题计划"><a href="#刷题计划" class="headerlink" title="刷题计划"></a>刷题计划</h2><ul><li>一天坚持刷一道，三个月刷完简单和中等</li><li>刚开始的一个月先把简单刷完，再刷中等难度的</li><li>每天刷一道新题 + 重刷昨天的题</li></ul><h2 id="刷题方法"><a href="#刷题方法" class="headerlink" title="刷题方法"></a>刷题方法</h2><blockquote><p>极客时间覃超老师的“五毒神掌”刷题法</p><ol><li>第一遍<ul><li>5~10分钟：读题 + 思考，一定要先自己思考！<ul><li>若有思路，则写代码实现自己的思路</li><li>若无思路，则直接看前三名高赞解法。注意！多解法，比较各种解法优劣</li></ul></li><li>看完解法后先理解，写下大致的解题思路或者伪代码，方便后面复现</li><li>背诵默写比较好的解法，以后碰到类似的题就有思路了</li></ul></li><li>第二遍<ul><li>马上关掉答案，看看自己能不能再写出来。遇到 bug 也不用怕，一步一步 debug 提交通过</li><li>可以切到国际站看看国外大佬的高票题解，多种解法比较，体会 → 优化自己写的代码</li><li>及时总结，记录笔记</li></ul></li><li>第三遍<ul><li>过一天后，重刷前一天的题目</li><li>如果掌握程度不够，去做专项练习，补薄弱部分<ul><li>专项练习就是去刻意练习自己不熟悉的这类题</li><li>整理这类题的算法模板</li></ul></li></ul></li><li>第四遍<ul><li>过了一周之后，回来反复练习相同题目</li></ul></li><li>第五遍<ul><li>面试前的恢复训练：提前两三周重刷之前做过的题目</li></ul></li></ol></blockquote><p>总结：</p><ul><li>刷题只刷一遍是不够的！要反复刷！</li><li>要能有理解性的（默）写出来</li><li>坚持下去</li></ul><h2 id="打卡记录"><a href="#打卡记录" class="headerlink" title="打卡记录"></a>打卡记录</h2><table><thead><tr><th>题目</th><th>一刷时间</th><th>二刷时间</th><th>三刷时间</th><th>掌握程度</th><th>题目难度</th><th>标签</th></tr></thead><tbody><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></td><td>2022.11.23</td><td>2022.11.29</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>哈希表；数组</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></td><td>2022.11.26</td><td>2022.11.30</td><td>…</td><td>⭐⭐</td><td>中等</td><td>链表；数学</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></td><td>2022.11.26</td><td>2022.12.02</td><td>…</td><td>⭐⭐</td><td>中等</td><td>哈希表；字符串；滑动窗口</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></td><td>2022.11.27</td><td>2022.12.03</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>动态规划</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/counting-bits/">338. 比特位计数</a></td><td>2022.11.27</td><td>2022.12.04</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>动态规划</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></td><td>2022.11.28</td><td>2022.12.05</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/diameter-of-binary-tree/">543. 二叉树的直径</a></td><td>2022.11.28</td><td>2022.12.10</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></td><td>2022.11.29</td><td>2022.12.06</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/hamming-distance/">461. 汉明距离</a></td><td>2022.12.01</td><td>2022.12.09</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>位运算</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></td><td>2022.12.02</td><td>2022.12.07</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>位运算；数组</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></td><td>2022.12.03</td><td>2022.12.08</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS；栈</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/merge-two-binary-trees/">617. 合并二叉树</a></td><td>2022.12.04</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS；BFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></td><td>2022.12.05</td><td>2022.12.11</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS；BFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></td><td>2022.12.06</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>栈；字符串</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></td><td>2022.12.07</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>中等</td><td>二叉树；BFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a></td><td>2022.12.08</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>数组；哈希表；计数</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></td><td>2022.12.09</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>哈希表；链表；双指针</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></td><td>2022.12.10</td><td>…</td><td>…</td><td>⭐⭐</td><td>中等</td><td>链表；双指针</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></td><td>2022.12.11</td><td>…</td><td>…</td><td>⭐⭐</td><td>简单</td><td>链表；递归</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a></td><td>2022.12.12</td><td>…</td><td>…</td><td>⭐⭐</td><td>简单</td><td>链表；双指针；哈希表</td></tr></tbody></table><h2 id="刷题笔记"><a href="#刷题笔记" class="headerlink" title="刷题笔记"></a>刷题笔记</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h3><ul><li>暴力解法，<code>O(N^2)</code> 时间复杂度</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更好的解法：用哈希表空间换时间<ul><li>使用一个哈希表存储 nums 数组每个数的下标，如果 target - nums[i] 存在则返回结果，否则保存这个数的下标到哈希表中</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h3><ul><li>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补 0</li><li>同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加<ul><li>而当前位计算结束后同样需要更新进位值</li></ul></li><li>此外，如果链表遍历结束后，有 <code>carry &gt; 0</code>，还需要在答案链表的后面附加一个节点，节点的值为 <code>carry</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> a <span class="token operator">=</span> l1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l1<span class="token punctuation">.</span>val        <span class="token keyword">const</span> b <span class="token operator">=</span> l2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l2<span class="token punctuation">.</span>val        <span class="token keyword">const</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> carry        <span class="token comment">// 分为头节点和非头节点两种情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> head        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span><span class="token comment">// 计算进位，这里要向下取整，不然是小数</span>        carry <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果两个链表都走完了，还有进位，要新创建一个节点保存这个进位</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h3><ul><li><strong>滑动窗口</strong>，使用两个指针表示字符串中的某个子串（或窗口）的左右边界：<code>[start,end]</code></li><li>然后我们可以不断地向右移动右指针，直到跟 <code>[start,end]</code> 里面的字符重复，记录下这个无重复子串的长度</li><li>将左指针 <code>start</code> 向右移动一位，更新起始的位置</li><li>更新后的 <code>[start,end]</code> 里面的字符仍不重复，继续移动右指针</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> rk <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token comment">// 为什么这里要判断 rk+1 而不是 rk？</span>        <span class="token comment">// 因为 [i,rk] 不重复，需要判断 rk+1 与 [i,rk] 内的字符是否重复</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rk <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>rk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>rk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            rk<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> rk <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h3><ul><li>递归版会超时，用动态规划来做</li><li>定义 <code>dp[n]</code>：在第 n 阶爬楼梯的方法数，每次可以爬 1 或 2 阶</li><li>状态转移方程：<code>dp[n] = dp[n-1] + dp[n-2]</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="338-比特位计数"><a href="#338-比特位计数" class="headerlink" title="338.比特位计数"></a>338.比特位计数</h3><ul><li>动态规划 O(N) 时间复杂度</li><li>判断是不是 2 的 n 次方，如果是说明二进制1的个数只有1个</li><li>状态转移方程：<code>dp[i] = dp[i - Math.pow(2, Math.floor(Math.log2(i))) ] + 1</code>。用一个数举例，比如 7 = 4 + 3，dp[7] = dp[3] + 1</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">countBits</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span> <span class="token operator">===</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一种更好的办法（规律），基于奇偶数判断</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">countBits</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h3><ul><li>以 root 为根节点的二叉树最大深度：Math.max(左子树的最大深度，右子树的最大深度) + 1</li><li>如果访问到空节点，则返回 0</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> root <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543.二叉树的直径"></a>543.二叉树的直径</h3><ul><li>最初的解法：递归里面有其他递归，时空间复杂度都很高</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">diameterOfBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// return maxDepth(root.left) + maxDepth(root.right)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> root <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跟二叉树的最大深度这题很类似，转换为求解<strong>每个</strong>节点（并不只是根节点）的左右子树最大深度之和的最大值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">diameterOfBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans        <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 到达空节点则返回 0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token comment">// 左子树最大深度</span>        <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment">// 右子树最大深度</span>        <span class="token comment">// 比较每个节点的直径，更新最大值</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 返回节点深度</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h3><ul><li>递归版：采用前序遍历<ul><li>交换当前节点的左节点和右节点</li><li>递归左子树和右子树</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>left<span class="token punctuation">]</span>  <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">return</span> root<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>递归版：采用后序遍历，自底向上</p><ul><li>如果当前遍历到的节点 <code>root</code> 的左右两棵子树都已经翻转，那么我们只需要交换两棵子树的位置，即可完成以 <code>root</code> 为根节点的整棵子树的翻转。</li></ul></li></ul>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 后序遍历，从下往上交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> leftNode <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token keyword">let</span> rightNode <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> rightNode    root<span class="token punctuation">.</span>right <span class="token operator">=</span> leftNode    <span class="token keyword">return</span> root<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>非递归版：采用层序遍历，从上往下交换左节点和右节点</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">||</span> node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">[</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>node<span class="token punctuation">.</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>node<span class="token punctuation">.</span>left<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="461.汉明距离"></a>461.汉明距离</h3><p>其实就是求异或，然后求二进制中 1 的个数</p><ul><li>最开始用的是最笨的方法<ul><li>求完异或，使用 <code>toString(2)</code> 将结果转换为二进制</li><li>然后迭代二进制字符串统计 1 的个数</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hammingDistance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">^</span> y    <span class="token keyword">let</span> binary_str <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> binary_str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>binary_str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更优的解法<ul><li>将异或值的每一位都与 1 进行与操作，统计结果为 1 的数量</li><li>每次与操作完成后，将异或值右移一位，直到为 0</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hammingDistance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">^</span> y    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>sum <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        sum <span class="token operator">>>=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136.只出现一次的数字"></a>136.只出现一次的数字</h3><ul><li>这题简单，对所有数求异或就行了。因为其他数都出现两次，而相同的数异或值为 0，最后得到的就是只出现一次的数字</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">singleNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94.二叉树的中序遍历"></a>94.二叉树的中序遍历</h3><ul><li>递归法</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">inorder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>ans</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历顺序：左->根->右</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>非递归法，利用栈</p><ul><li><p>除了定义一个栈之外，还需要一个指针用于遍历节点</p></li><li><p>根据左子树优先遍历的原则，一直往左走并将访问的节点放入栈中</p><ul><li><blockquote><p>记忆：中序遍历不忘“左链入栈”</p></blockquote></li></ul></li><li><p>直到到达左子树的最左端，访问到空节点时将节点出栈</p></li><li><p>处理右子树</p></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> root    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h3><ul><li><p>递归三部曲</p><blockquote><p><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/merge-two-binary-trees/solution/by-carlsun-2-jroe/">https://leetcode.cn/problems/merge-two-binary-trees/solution/by-carlsun-2-jroe/</a></p></blockquote><ul><li><strong>确定递归函数的参数和返回值</strong><ul><li>参数就是传入两个二叉树的根节点</li><li>返回值就是合并之后二叉树的根节点</li></ul></li><li><strong>确定终止条件</strong><ul><li>如果 <code>root1</code> 和 <code>root2</code> 都为 <code>null</code>，停止往下递归</li></ul></li><li><strong>确定单层递归的逻辑</strong><ul><li>用的是二叉树的先序遍历</li><li>先合并两棵二叉树的根节点</li><li>再递归左子树和右子树，给根节点的左节点和右节点赋值</li></ul></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mergeTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span> root2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">||</span> root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> a <span class="token operator">=</span> root1 <span class="token operator">?</span> root1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span>        <span class="token keyword">let</span> b <span class="token operator">=</span> root2 <span class="token operator">?</span> root2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1 <span class="token operator">?</span> root1<span class="token punctuation">.</span>left <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>root2 <span class="token operator">?</span> root2<span class="token punctuation">.</span>left <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1 <span class="token operator">?</span> root1<span class="token punctuation">.</span>right <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>root2 <span class="token operator">?</span> root2<span class="token punctuation">.</span>right <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h3><ul><li><p>根节点左子树：<code>left</code>，根节点右子树：<code>right</code></p></li><li><p>比较（<code>left</code> 的左节点和 <code>right</code> 的右节点） &amp;&amp; （<code>right</code> 的左节点和 <code>left</code> 的右节点）是否相同</p><ul><li>如果有一个为空则返回 false</li><li>如果两个值不同则返回 false</li></ul></li><li><p>递归终止条件</p><ul><li>都为空指针则返回 true</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> <span class="token function">isSymmetric2</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isSymmetric2</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span>root2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> root2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>val <span class="token operator">!==</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">isSymmetric2</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSymmetric2</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h3><ul><li>如果迭代到左括号，将其进栈</li><li>如果迭代到右括号，将其与栈顶比较是否成对<ul><li>如果成对则弹出栈顶元素</li></ul></li><li>如果最后栈为空，则说明是有效括号</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 把左括号进栈</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'&#123;'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 如果遇到非法字符直接返回结果</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>                        <span class="token keyword">let</span> top <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment">// 如果遍历到的右括号与栈顶的左括号对应上，则将左括号出栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">===</span> <span class="token string">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'&#125;'</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">===</span> <span class="token string">'&#123;'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">']'</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">===</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102.二叉树的层序遍历"></a>102.二叉树的层序遍历</h3><ul><li>BFS 使用的是队列数据结构</li><li>将当前层的节点出队，同时将孩子节点入队</li><li>进入下一轮循环，直到队列为空</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 设置一个计数器，值为某一层节点的数量</span>        <span class="token keyword">let</span> count <span class="token operator">=</span> queue<span class="token punctuation">.</span>length        <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">// 分层，当一层遍历完成后，进入下一次循环（下一层）</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            level<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>   queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            count<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169.多数元素"></a>169.多数元素</h3><ul><li>摩尔投票算法<ul><li>将第一个数初始化为候选众数（candidate），令 <code>count = 1</code></li><li>遍历 <code>nums</code> 时与 <code>candidate</code> 比较，相同则 <code>count + 1</code>，否则 <code>count - 1</code></li><li>如果 <code>count == 0</code>，更改 <code>candidate</code> 并重新开始计数</li><li>算法的可行性：众数的出现次数大于半数，所以最后的 <code>count</code> 必定大于 0，其他数都会被抵消掉</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">majorityElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">++</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            count<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            count <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141.环形链表"></a>141.环形链表</h3><ul><li>利用快慢指针，慢指针一次走一步，快指针一次走两步</li><li>如果快慢指针相遇，说明链表有环</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> slow <span class="token operator">=</span> fast <span class="token operator">=</span> head    <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">&amp;&amp;</span> fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">if</span><span class="token punctuation">(</span>slow <span class="token operator">===</span> fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-删除链表的倒数第N个结点"><a href="#19-删除链表的倒数第N个结点" class="headerlink" title="19.删除链表的倒数第N个结点"></a>19.删除链表的倒数第N个结点</h3><ul><li>设置快慢指针，先让快指针先走 N 步</li><li>然后快慢指针同时往下走，直到快指针到达最后一个结点，此时慢指针为倒数第 N 个结点的前一个结点</li><li>找到前一个结点后，即可删除倒数第 N 个结点</li><li>这里要注意删除第一个结点的特殊情况</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//快慢指针</span><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span> <span class="token parameter">head <span class="token punctuation">,</span>  n</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> slow <span class="token operator">=</span> head    <span class="token keyword">let</span> fast <span class="token operator">=</span> head        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除第1个</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    <span class="token keyword">return</span> head<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h3><ul><li><p>迭代法</p><ul><li>定义三个指针，分别指向当前遍历到的结点 cur、它的前一个结点 pre 及后一个结点 next</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>cur <span class="token operator">=</span> head    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre        pre <span class="token operator">=</span> cur        cur <span class="token operator">=</span> next    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>递归法</p><p>建议看图解演示，更好理解一些</p><blockquote><p><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/">https://leetcode.cn/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/</a></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这里的 cur 指的是最后一个节点</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head  <span class="token comment">// 避免出现环</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> cur <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160.相交链表"></a>160.相交链表</h3><ul><li>设 <code>A</code> 链表头节点到相交处节点的长度为 a，<code>B</code> 链表头节点到相交处节点的长度为 b，相交处节点到尾节点的长度为 c，（a + c）+ b = （b + c）+ a</li><li>设置两个指针，一个从 <code>A</code> 链表头节点开始迭代，另一个从 <code>B</code> 链表头节点开始迭代</li><li>为了使这两个指针走过相同的长度，并在相交的节点上相遇：若有一个指针到达末尾，则将其置为另一个链表的头节点，继续往下走</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> headA    <span class="token keyword">let</span> b <span class="token operator">=</span> headB    <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> headB <span class="token operator">:</span> a<span class="token punctuation">.</span>next        b <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> headA <span class="token operator">:</span> b<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;刷题计划&quot;&gt;&lt;a href=&quot;#刷题计划&quot; class=&quot;headerlink&quot; title=&quot;刷题计划&quot;&gt;&lt;/a&gt;刷题计划&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一天坚持刷一道，三个月刷完简单和中等&lt;/li&gt;
&lt;li&gt;刚开始的一个月先把简单刷完，再刷中等难度的&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="笔记" scheme="https://cloudnzk.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="刷题" scheme="https://cloudnzk.github.io/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="LeetCode" scheme="https://cloudnzk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Hingle 主题基础配置&amp;进阶配置</title>
    <link href="https://cloudnzk.github.io/2022/05/20/hexo-hingle-configuration/"/>
    <id>https://cloudnzk.github.io/2022/05/20/hexo-hingle-configuration/</id>
    <published>2022-05-20T13:52:46.000Z</published>
    <updated>2023-06-16T16:58:59.633Z</updated>
    
    <content type="html"><![CDATA[<p>很早之前就喜欢奇妙保罗大佬的 <a target="_blank" rel="noopener" href="https://github.com/Dreamer-Paul/Single">Single</a> 主题，奈何当时只支持 <code>Typecho</code> 而没有 <code>Hexo</code> 版本的，只得作罢。令人惊喜的是，作者本人在2021年又将其移植到 <code>Hexo</code> 中，称为 <a target="_blank" rel="noopener" href="https://github.com/Dreamer-Paul/Hingle">Hingle</a>。</p><blockquote><p>一个简洁大气，含夜间模式的 Hexo 博客模板。</p></blockquote><p>正如其简介所言，<code>Hingle</code> 主题就是那么简约干净，清清爽爽。另外，个人比较喜欢这款主题的配色（蓝色太好看了），还有可爱的二次元风格背景图。以下就是本人搭建好的博客页面，是不是挺简洁美观的~</p><p><img src="https://s2.loli.net/2022/05/20/oBI6S1578WiYf4V.png" alt="Hingle博客预览"></p><p>话不多说，下面就直接开换。さあ、始めよう!</p><h1 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h1><p>在使用这款主题之前，你应该首先安装 <code>Node.js</code>，然后将 <code>Hexo</code> 安装好，并且新建一个 <code>Hexo</code> 博客目录。</p><p>这部分参考一下 <code>Hexo</code> 的 <a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/docs/">官方文档</a> 即可，这里不再赘述。下面简单贴下 <code>Hexo</code> 安装的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -ghexo init blog<span class="token builtin class-name">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span>hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="引入主题"><a href="#引入主题" class="headerlink" title="引入主题"></a>引入主题</h1><p>引入主题也比较简单，按照 <code>Hingle</code> 的 <a target="_blank" rel="noopener" href="https://docs.paul.ren/hingle/#/?id=%e5%ae%89%e8%a3%85">官方文档</a> 一步一步来做：</p><ol><li><p>首先将下载好的主题源码放进 <code>Hexo</code> 根目录的 <code>themes</code> 下，并将文件夹重命名为 <code>hingle</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Dreamer-Paul/Hingle.git<span class="token function">mv</span> Hingle themes/hingle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>然后打开Hexo目录下的 <code>_config.yml</code> 文件，将里面的 <code>theme</code> 字段，更换成 <code>hingle</code> 即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> hingle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>现在运行 <code>hexo g</code> 和 <code>hexo s</code> 指令，然后在浏览器打开 <code>http://localhost:4000/</code>，可以看到主题已经引入成功了。</p><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>以下是主题的基本配置过程，如没有特别说明，<code>_config.yml</code> 文件都指的是主题目录下的配置文件。</p><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><p>将默认的信息改成你自己的就行，个人信息会在文章末尾显示。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token string">'Hingle'</span> <span class="token comment"># 作者名称</span><span class="token key atrule">author_avatar</span><span class="token punctuation">:</span> <span class="token string">'https://sdn.geekzu.org/avatar/d22eb460ecab37fcd7205e6a3c55c228?s=200&amp;r=X&amp;d='</span> <span class="token comment"># 作者头像</span><span class="token key atrule">author_text</span><span class="token punctuation">:</span> <span class="token string">'请在这里设置你的作者信息'</span> <span class="token comment"># 作者信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="主页社交链接"><a href="#主页社交链接" class="headerlink" title="主页社交链接"></a>主页社交链接</h2><p><code>icon</code> 代表的是 <a target="_blank" rel="noopener" href="https://fontawesome.com/v4/icons/">font awesome 4</a> 中的图标名</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">social</span><span class="token punctuation">:</span> <span class="token comment"># 社交链接</span>  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'Github'</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'github'</span>    <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'https://github.com/cloudnzk'</span>  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'首页'</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'home'</span>    <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'https://silentlight.vercel.app/'</span>  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'音乐'</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'music'</span>    <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'https://music.163.com/#/user/home?id=81845106'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h2><p>要启用背景图，去掉 <code>background</code> 前的注释即可。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'https://api.paugram.com/wallpaper?source=gh'</span> <span class="token comment"># 主题背景</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h2><p>现在点击导航栏上的 <code>关于我</code>，会显示 <code>404 not found</code>，因为关于页面还没有被创建出来。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span> <span class="token comment"># 页眉菜单项目</span>  <span class="token key atrule">'关于'</span><span class="token punctuation">:</span> /about  <span class="token key atrule">'朋友们'</span><span class="token punctuation">:</span> /friends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个关于的独立页面即可，但需要注意一下页面的路径，要跟 <code>_config.yml</code> 文件中 <code>menu</code> 配置的路径对应上。以下指令是在 <code>about</code> 路径下创建一个名为 <code>index.md</code> 的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page --path about/index <span class="token string">"About me"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="favicon图标更换"><a href="#favicon图标更换" class="headerlink" title="favicon图标更换"></a>favicon图标更换</h2><p>找到 <code>~/blog/themes/hingle/source/static/img</code> 路径下的 <code>icon.png</code>，替换成自己的即可。如果不显示新的 favicon 图标，可以强制刷新一下页面，或者清理一下浏览器的缓存。</p><p>至此，<code>Hingle</code> 主题的基本配置就完成了。</p><h1 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h1><h2 id="提高二次元浓度"><a href="#提高二次元浓度" class="headerlink" title="提高二次元浓度"></a>提高二次元浓度</h2><blockquote><p>注意：本节要对 Hingle 主题进行 DIY (<del>大量魔改</del>)，请谨慎使用</p></blockquote><ol><li><p>首页展示动漫经典语录</p><p><img src="https://s2.loli.net/2022/05/20/ikLsA1Vy3rzdj4b.png" alt="动漫语录"></p></li><li><p>展示追番列表</p><p><img src="https://s2.loli.net/2022/05/20/PbLMNU7YurVa5vJ.png" alt="追番列表"></p></li></ol><h3 id="动漫语录"><a href="#动漫语录" class="headerlink" title="动漫语录"></a>动漫语录</h3><p>进入主题目录，找到 <code>layout</code> 目录中的 <code>layout.ejs</code>文件，把以下代码加入到 <code>&lt;/body&gt;</code> 标签之前：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一言<span class="token constant">API</span> Start<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://v1.hitokoto.cn?c=a&amp;c=b'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> hitokoto <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hitokoto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hitokoto<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>hitokoto <span class="token operator">+</span> <span class="token string">"《"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from <span class="token operator">+</span> <span class="token string">"》"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一言<span class="token constant">API</span> End<span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对同目录的 <code>index.ejs</code> 进行如下修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> config<span class="token punctuation">.</span>description <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一言 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"hitokoto"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="追番列表"><a href="#追番列表" class="headerlink" title="追番列表"></a>追番列表</h3><ol><li><p>先安装 <a target="_blank" rel="noopener" href="https://github.com/HCLonely/hexo-bilibili-bangumi">hexo-bilibili-bangumi</a> 插件，并进行配置。配置过程省略，请参考文档。</p></li><li><p>配置完成后，记得先拉取番剧数据信息：<code>hexo bangumi -u</code>，然后再 <code>hexo g</code> ，最后会生成一个 <code>bangumi.html</code> 的静态文件。</p></li></ol><p>在第 2 步会出现 <code>hexo g</code> 失败的情况。因为追番页面没有发表时间，所以<code>page.date</code> 为 <code>undefined</code>，调用<code>unix()</code> 方法会出错。根据报错提示，删掉<code>~/blog/themes/hingle/layout</code> 目录下，<code>page.ejs</code> 与 <code>post.ejs</code> 的以下代码可以得到解决。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 删除以下代码&lt;% if (moment().unix() - page.date.unix() &gt;&#x3D; 15552000) &#123; %&gt;&lt;blockquote&gt;这篇文章上次修改于 &lt;%&#x3D; Math.ceil((moment().unix() - page.date.unix()) &#x2F; 86400) %&gt; 天前，可能其部分内容已经发生变化，如有疑问可询问作者。&lt;&#x2F;blockquote&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上两步后，此时我们对追番页的 <code>想看</code>、<code>在看</code>、<code>看过</code> 进行切换时，会默认打开一个新窗口，这是因为 <code>Hingle</code> 默认将文章的所有链接都设置成外链了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 自动添加外链</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">links</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> l <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ks<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      t<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token string">"_blank"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，只需要排除掉追番页的链接即可。打开 <code>~/blog/themes/hingle/source/static/</code> 下的 <code>hingle.js</code> 文件，进行如下修改：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 自动添加外链</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">links</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> l <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排除追番页</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'bangumi'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ks<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      t<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token string">"_blank"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认夜间模式"><a href="#默认夜间模式" class="headerlink" title="默认夜间模式"></a>默认夜间模式</h2><p>编辑 <code>themes/hingle/layout/</code> 文件夹下的 <code>layout.ejs</code>，在 <code>&lt;body&gt;</code> 标签上添加 <code>dark-theme</code> 的 CSS 样式即可</p><p><img src="https://s2.loli.net/2022/12/02/zGiNFTfoAe9uSkj.png"></p><p>现在 <code>Hingle</code> 的夜间模式切换有点问题，等作者啥时候有空修复一下吧 </p><h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><p>下面提供了我的整套白嫖方案，具体的步骤可搜索网络的教程解决，在此不再赘述</p><ul><li>首先将博客托管到 <code>vercel</code> 上。在 <code>vercel</code> 的 Dashboard 中导入 <code>GitHub</code> 中的博客仓库，并一键部署</li></ul><p><img src="https://s2.loli.net/2022/05/20/1d6crCWAEZMXfB7.png" alt="vercel部署"></p><ul><li><p>遗憾的是，<code>vercel</code> 现在的域名在国内无法访问。因此需要在 <code>Freenom</code> 上申请一个免费域名</p></li><li><p>然后在 <code>Cloudflare</code> 上配置一下域名的 <code>DNS</code> 解析。这样 <code>DNS</code> 解析时就通过<code>Cloudflare</code> 做了一层代理，使我们的域名能够在国内访问</p><pre class="line-numbers language-none"><code class="language-none">A记录地址：76.76.21.98CNAME 记录地址：cname-china.vercel-dns.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="谷歌、百度收录"><a href="#谷歌、百度收录" class="headerlink" title="谷歌、百度收录"></a>谷歌、百度收录</h2><p>让谷歌、百度收录你的网站，让别人能搜索到你的文章</p><h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h3><ol><li><p>生成 <code>sitemap.xml</code> 站点地图</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中加入以下配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后用 <code>hexo g</code> 即可生成站点地图，可以看到 <code>public</code> 目录下多出了两个 <code>XML</code> 文件：<code>sitemap.xml</code> 和 <code>baidusitemap.xml</code></p></li><li><p>到<a target="_blank" rel="noopener" href="https://search.google.com/search-console/about">Google Search Console</a>进行验证，选择网址前缀验证，输入 <code>vercel</code> 分配的博客域名，点击继续</p><p><img src="https://s2.loli.net/2022/05/20/FMB1J2drjYuIsqU.png" alt="谷歌验证"></p></li><li><p>将下载好的 <code>HTML</code> 文件放到主题的 <code>source</code> 目录下</p></li><li><p>提交 <code>sitemap.xml</code> 站点地图</p><p><img src="https://s2.loli.net/2022/05/20/tjaEHSU1qfLZnis.png" alt="谷歌地图"></p></li></ol><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><ol><li>到 <a target="_blank" rel="noopener" href="https://ziyuan.baidu.com/">百度搜索资源平台</a> 添加博客域名，然后验证，验证方式跟上面谷歌的差不多</li><li>将下载好的 <code>HTML</code> 文件放到主题的 <code>source</code> 目录下</li><li>提交 <code>baidusitemap.xml</code> 站点地图</li></ol><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><p>在 <code>Hexo</code> 根目录下的 <code>_config.yml</code> 文件中配置 <code>description</code> 和 <code>keywords</code> 选项。以我的配置为例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Silentlight's blog<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'正视自己的弱小，方能变得更加强大'</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'Silentlight的个人小站：一个基于Hexo搭建、使用Hingle主题的静态博客；主要记录我的前端、科研笔记，生活所思所想等'</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> 前端<span class="token punctuation">,</span>生活<span class="token punctuation">,</span>科研<span class="token punctuation">,</span>笔记<span class="token key atrule">author</span><span class="token punctuation">:</span> Silentlight<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="bug-修复"><a href="#bug-修复" class="headerlink" title="bug 修复"></a>bug 修复</h1><blockquote><p>以下两个bug，作者均已修复，可更新到最新版本使用</p></blockquote><h2 id="font-awesome-图标丢失"><a href="#font-awesome-图标丢失" class="headerlink" title="font-awesome 图标丢失"></a>font-awesome 图标丢失</h2><p>2022.11月回来看自己的博客，发现博客的图标全部消失了。F12 打开 Chrome 开发者工具看了下，博客的图标是使用的是 font-awesome，于是推测是引入方面出了问题。</p><p><img src="https://s2.loli.net/2022/11/29/zND4lWicoSa5IPm.png"></p><p>经过一步步排查，原来是 font-awesome 的 CDN 无效了，需要更新 CDN 链接。</p><p>解决办法：编辑 <code>themes/hingle/layout/_partial</code> 文件夹下的 <code>head.ejs</code>，修改 font-awesome 的 CDN 链接为 <code>https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css</code></p><p><img src="https://s2.loli.net/2022/11/29/lxYBKVIHwq6JFhu.png"></p><h2 id="标签页显示“没有标题”解决"><a href="#标签页显示“没有标题”解决" class="headerlink" title="标签页显示“没有标题”解决"></a>标签页显示“没有标题”解决</h2><p>打开 <code>~/blog/themes/hingle/layout/_partial</code> 下的 <code>head.ejs</code> 文件，找到下面几行</p><pre class="line-numbers language-none"><code class="language-none">else if(is_post() &amp;&amp; page.title)&#123;title &#x3D; page.title;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在后面加上以下代码，增加对独立页面的判断与标题赋值</p><pre class="line-numbers language-none"><code class="language-none">else if(is_page() &amp;&amp; page.title)&#123;title &#x3D; page.title;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo官方文档</a></li><li><a target="_blank" rel="noopener" href="https://docs.paul.ren/hingle/#/">Hingle主题官方文档</a></li><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/victoryxa/article/details/104286446">Hexo博客添加一言</a></li><li><a target="_blank" rel="noopener" href="https://www.hansion.win/2020/04/13/hexo-bo-ke-deng-jing-tai-wang-ye-ti-jiao-bai-du-he-google-gu-ge-shou-lu/#toc-heading-2">Hexo博客等静态网页提交百度和Google谷歌收录</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很早之前就喜欢奇妙保罗大佬的 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/Dreamer-Paul/Single&quot;&gt;Single&lt;/a&gt; 主题，奈何当时只支持 &lt;code&gt;Typecho&lt;/code&gt;</summary>
      
    
    
    
    <category term="教程" scheme="https://cloudnzk.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://cloudnzk.github.io/tags/Hexo/"/>
    
    <category term="Hingle" scheme="https://cloudnzk.github.io/tags/Hingle/"/>
    
    <category term="博客搭建" scheme="https://cloudnzk.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="主题配置" scheme="https://cloudnzk.github.io/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>重拾Hexo博客，谈谈感想</title>
    <link href="https://cloudnzk.github.io/2022/05/20/return-hexo/"/>
    <id>https://cloudnzk.github.io/2022/05/20/return-hexo/</id>
    <published>2022-05-20T01:24:08.000Z</published>
    <updated>2022-05-21T12:04:28.507Z</updated>
    
    <content type="html"><![CDATA[<p>从2018年开始，玩<code>Hexo</code>博客大概快有4年了。期间也更换过不少的<code>Hexo</code>主题，比如<a target="_blank" rel="noopener" href="https://github.com/theme-next/hexo-theme-next">Next</a>、<a target="_blank" rel="noopener" href="https://github.com/volantis-x/hexo-theme-volantis">Volatis</a>、<a target="_blank" rel="noopener" href="https://github.com/Molunerfinn/hexo-theme-melody">Melody</a>、<a target="_blank" rel="noopener" href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>、<a target="_blank" rel="noopener" href="https://github.com/honjun/hexo-theme-sakura">Sakura</a>、<a target="_blank" rel="noopener" href="https://github.com/amehime/hexo-theme-shoka">Shoka</a>等主题。那时候的我追求的是花里胡哨的界面，以及集成一大堆可有可无的功能，结果到头来，写博客的事情一次都没坚持下来。现在仔细想来，博客的文章质量与阅读体验不正是最基本的要求么，一味地追求花里胡哨的东西不但使得博客可读性变低，还拖慢了加载速度。</p><p>直到在<code>Hexo</code>的主题列表上发现了<code>Hingle</code>这个简约干净的主题，又让我燃起了写博客的兴致。在这里，你只需要专注于写作就够了，其余的什么都不用管。就像是，在体验过花花世界之后，才察觉到简约之美，正所谓返璞归真，大道至简是也。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从2018年开始，玩&lt;code&gt;Hexo&lt;/code&gt;博客大概快有4年了。期间也更换过不少的&lt;code&gt;Hexo&lt;/code&gt;主题，比如&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/theme-next</summary>
      
    
    
    
    <category term="随笔" scheme="https://cloudnzk.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Hexo" scheme="https://cloudnzk.github.io/tags/Hexo/"/>
    
    <category term="感悟" scheme="https://cloudnzk.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>日本语学习笔记-新标日初级第4课</title>
    <link href="https://cloudnzk.github.io/2022/05/08/nihongo-notes-lesson4/"/>
    <id>https://cloudnzk.github.io/2022/05/08/nihongo-notes-lesson4/</id>
    <published>2022-05-08T09:08:07.000Z</published>
    <updated>2025-03-30T09:31:11.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><ol><li>場所 <img src="https://s2.loli.net/2025/03/30/CHD9RugSLmXNZib.png"></li><li>方位 <img src="https://s2.loli.net/2025/03/30/GIcJnRYvDBQ1Zyq.png"></li></ol><h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><blockquote><p>早期学习的时候当做一个公式，把这些句型都记忆下来</p></blockquote><ol><li>[場所]に　[物]が　います/あります</li></ol><p><img src="https://s2.loli.net/2025/03/30/3dYSPXCtDIxH5cr.png"></p><ul><li>表示 **有~**，相当于某个地方有某物</li><li>に助词前面是地点　が助词前面是存在的主体。记住：助词是跟前面的名/代词是一块的</li><li>あります/います 表示<strong>事物的存在</strong>，如果主语是不具有意志的事物，用 あります；反之用います</li><li>否定用 ありません</li><li>例句：部屋に　机と　椅子(と)　あります<ul><li>と　表示 ”和“</li><li>表示并列关系的 と，应该在并列的每个词后面都加，但最后的那个词通常省略</li></ul></li><li>如果有意志和无意志的并列，那么怎么说？<ul><li>例如：桌子下面有小猫和鞋子</li><li>应该分开说：机の下に　猫が　います　靴も　あります</li></ul></li><li>疑问句<ul><li>庭に　何が　ありますか</li><li>あそこに　誰が　いますか</li></ul></li><li>省略<ul><li>[物]が　います/あります</li><li>省略了前面的地点，表示存在 / 有什么[人或物]</li></ul></li></ul><p><img src="https://s2.loli.net/2025/03/30/uyrEYIqeQDhvskn.png" alt="2022-07-03_1.53.35.png"></p><ol start="2"><li>[人/物]は 　[場所]に　います/あります</li></ol><ul><li>表示<strong>位置</strong>，人/物 在 地点</li><li>跟前面句型的区别是，现在 [物] 在前面</li><li>跟第 3 课的 ”[人/物]は [場所] です” 意思是一样的，都表示<del>在</del></li><li>疑问句<ul><li>~ は　どこに　ありますかいますか</li><li>表示 [人/物] 在哪里</li><li>疑问词做主语时，要将后面的 は 改成 が  <img src="https://s2.loli.net/2025/03/30/hWjrC2vJoNSgZI7.png" alt="2022-07-03_10.32.05.png"></li></ul></li><li>省略前面的 [人/物]，一般在回答问句中使用，省略主语<ul><li>[場所]に　います/あります</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;单词&quot;&gt;&lt;a href=&quot;#单词&quot; class=&quot;headerlink&quot; title=&quot;单词&quot;&gt;&lt;/a&gt;单词&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;場所 &lt;img src=&quot;https://s2.loli.net/2025/03/30/CHD9RugSLmXNZib.png&quot;</summary>
      
    
    
    
    <category term="日语" scheme="https://cloudnzk.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
    <category term="学习" scheme="https://cloudnzk.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://cloudnzk.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="新标日" scheme="https://cloudnzk.github.io/tags/%E6%96%B0%E6%A0%87%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>日本语学习笔记-新标日初级第3课</title>
    <link href="https://cloudnzk.github.io/2022/04/13/nihongo-notes-lesson3/"/>
    <id>https://cloudnzk.github.io/2022/04/13/nihongo-notes-lesson3/</id>
    <published>2022-04-13T09:01:56.000Z</published>
    <updated>2025-03-30T09:11:33.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><ol><li>ここ/そこ/あそこ　は　デパート　です （这里是百货商店）<ul><li>ここ、そこ、あそこ用于指示场所，表示的位置关系跟これ、それ、あれ相同</li></ul></li><li>食堂　は　デパートの　７階　です（食堂在百货商店的7层）<ul><li>表示”名词“存在于”名词[场所]“</li><li>询问存在的场所：トイレは　どこですか（厕所在哪里）</li></ul></li><li>あそこも　ジェシー企画　の　ビルです<ul><li>助词も代表也，可以放在は的位置</li></ul></li><li>かばん売り場は　１階ですか，２階ですか<ul><li>给出多种可能的答案，要确切回答。不能用はい　いいえ回答</li></ul></li></ol><h2 id="表达"><a href="#表达" class="headerlink" title="表达"></a>表达</h2><ol><li>こちら/そちら/あちら/どちら 这边/那边/哪边，表示方向的代词。可以是的礼貌用语 <img src="https://s2.loli.net/2025/03/30/oBCZcOx5Ws3I8gq.png"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;句子&quot;&gt;&lt;a href=&quot;#句子&quot; class=&quot;headerlink&quot; title=&quot;句子&quot;&gt;&lt;/a&gt;句子&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ここ/そこ/あそこ　は　デパート　です （这里是百货商店）&lt;ul&gt;
&lt;li&gt;ここ、そこ、あそこ用于指示场所，表示的位置关系跟これ</summary>
      
    
    
    
    <category term="日语" scheme="https://cloudnzk.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
    <category term="学习" scheme="https://cloudnzk.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://cloudnzk.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="新标日" scheme="https://cloudnzk.github.io/tags/%E6%96%B0%E6%A0%87%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>如何读文献</title>
    <link href="https://cloudnzk.github.io/2022/01/16/read-paper-experience/"/>
    <id>https://cloudnzk.github.io/2022/01/16/read-paper-experience/</id>
    <published>2022-01-16T08:17:11.000Z</published>
    <updated>2025-03-29T10:14:41.039Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/06/16/JDSPTj1WrdZqlzB.png" alt="读文献"></p><h2 id="文献检索"><a href="#文献检索" class="headerlink" title="文献检索"></a>文献检索</h2><h3 id="在哪找文献"><a href="#在哪找文献" class="headerlink" title="在哪找文献"></a>在哪找文献</h3><ul><li><p>中文论文</p><ul><li><p>1.知网（推荐）</p><ul><li>博硕论文</li><li>可通过云大图书馆免费下载论文</li></ul></li><li><p>2.百度学术</p><ul><li>知网找不到的中文论文来这找</li></ul></li></ul></li><li><p>英文论文</p><ul><li>谷歌学术</li><li>可通过谷歌学术镜像访问，建议访问原网站</li></ul></li><li><p>其他渠道</p><ul><li><p>1.综述论文下面引用的那些文献</p></li><li><p>2.GitHub、公众号、知乎、blog上的论文列表</p><p><a target="_blank" rel="noopener" href="https://github.com/THUNLP-MT/MT-Reading-List#meta_learning">https://github.com/THUNLP-MT/MT-Reading-List#meta_learning</a></p></li></ul></li></ul><h3 id="谷歌学术检索技巧"><a href="#谷歌学术检索技巧" class="headerlink" title="谷歌学术检索技巧"></a>谷歌学术检索技巧</h3><ul><li><p>关键词搜索</p><ul><li>根据研究问题，想出几个关键词；用空格分开组合搜索</li></ul></li><li><p>按日期筛选</p><ul><li>查找近年来的最新文献</li></ul></li><li><p>高级搜索</p><ul><li>精确搜索，结果更准确</li></ul></li><li><p>相关文章</p><ul><li>找到类似的文献</li></ul></li><li><p>被引用次数</p><ul><li>看其他文献怎么评论该文献</li></ul></li></ul><h2 id="文献管理"><a href="#文献管理" class="headerlink" title="文献管理"></a>文献管理</h2><h3 id="Endnote基本使用"><a href="#Endnote基本使用" class="headerlink" title="Endnote基本使用"></a>Endnote基本使用</h3><p>软件包分享，需要校内IP下载</p><ul><li><p>从谷歌学术导入文献</p></li><li><p>关联PDF文件</p><ul><li>以后读文献、高亮文献都从Endnote打开，统一管理</li></ul></li><li><p>文献分类</p><ul><li>建立索引，方便查找</li><li>集中时间看同一类的论文，便于比较</li></ul></li><li><p>一句话总结这篇文献，方便下次阅读</p></li></ul><h3 id="文献同步"><a href="#文献同步" class="headerlink" title="文献同步"></a>文献同步</h3><ul><li><p>登录Endnote账号同步</p></li><li><p>百度网盘工作空间同步</p><ul><li>同步Endnote存文献的那个文件夹</li></ul></li><li><p>GitHub Desktop</p></li></ul><h2 id="文献阅读"><a href="#文献阅读" class="headerlink" title="文献阅读"></a>文献阅读</h2><h3 id="知云划线翻译"><a href="#知云划线翻译" class="headerlink" title="知云划线翻译"></a>知云划线翻译</h3><ul><li>选有道或者谷歌医学引擎</li><li>阅读的过程中高亮重要句子</li></ul><h3 id="阅读顺序：摘要、结论、引言、讨论、结果和方法"><a href="#阅读顺序：摘要、结论、引言、讨论、结果和方法" class="headerlink" title="阅读顺序：摘要、结论、引言、讨论、结果和方法"></a>阅读顺序：摘要、结论、引言、讨论、结果和方法</h3><h3 id="先泛读，然后选择重要的文献精读"><a href="#先泛读，然后选择重要的文献精读" class="headerlink" title="先泛读，然后选择重要的文献精读"></a>先泛读，然后选择重要的文献精读</h3><ul><li>在Endnote分组：重要/有些重要/不重要</li></ul><h2 id="文献笔记"><a href="#文献笔记" class="headerlink" title="文献笔记"></a>文献笔记</h2><h3 id="为什么要记笔记"><a href="#为什么要记笔记" class="headerlink" title="为什么要记笔记"></a>为什么要记笔记</h3><ul><li>1.需要重复阅读某篇文章时。提高阅读文献的效率，减少重复工作</li><li>2.读完某篇文章的思考和收获，文章有哪些点可以借鉴</li><li>建议重要的文章记下笔记，不重要的高亮一下就行了</li></ul><h3 id="建立知识库"><a href="#建立知识库" class="headerlink" title="建立知识库"></a>建立知识库</h3><ul><li>Notion（推荐）</li><li>Excel表格（推荐）</li><li>GitHub repo</li></ul><h3 id="将高亮的句子全部翻译为中文"><a href="#将高亮的句子全部翻译为中文" class="headerlink" title="将高亮的句子全部翻译为中文"></a>将高亮的句子全部翻译为中文</h3><ul><li>总结与归纳，记下要点：根据句子翻译提炼重点</li><li>同时记录读这篇文章的体会、想法，或者与其他文献的关联比较，或者该文献的亮点与不足等</li></ul><h3 id="每个分类单独开一个文件或表格记录笔记"><a href="#每个分类单独开一个文件或表格记录笔记" class="headerlink" title="每个分类单独开一个文件或表格记录笔记"></a>每个分类单独开一个文件或表格记录笔记</h3><ul><li>便于比较和分析</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/06/16/JDSPTj1WrdZqlzB.png&quot; alt=&quot;读文献&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;文献检索&quot;&gt;&lt;a href=&quot;#文献检索&quot; class=&quot;headerlink&quot; title=&quot;文献检索</summary>
      
    
    
    
    <category term="经验" scheme="https://cloudnzk.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="科研" scheme="https://cloudnzk.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
    <category term="论文" scheme="https://cloudnzk.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>日本语学习笔记-新标日初级第2课</title>
    <link href="https://cloudnzk.github.io/2021/05/22/nihongo-notes-lesson2/"/>
    <id>https://cloudnzk.github.io/2021/05/22/nihongo-notes-lesson2/</id>
    <published>2021-05-22T09:01:16.000Z</published>
    <updated>2025-03-30T09:07:18.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="课文"><a href="#课文" class="headerlink" title="课文"></a>课文</h2><p>对话A：</p><blockquote><p>[!important]<br>これは　テレビですか<br>いいえ、それは　テレビでは　ありません。パソんコンです</p></blockquote><p>对话B：</p><blockquote><p>[!important]<br>それは　何ですか<br>これは　日本語の　本です</p></blockquote><p>对话C：</p><blockquote><p>[!important]<br>森さんの　かばんは　どれですか<br>あの　かばんです</p></blockquote><p>对话D：</p><blockquote><p>[!important]<br>その　ノートは　誰の　ですか<br>私のです</p></blockquote><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><p>これ／それ／あれ</p><p>この,その,あの,どの</p><h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><ol><li>これ／それ／あれは　ほんです</li></ol><ul><li><p>こ,そ,あ的区别：</p><p>  <img src="https://s2.loli.net/2025/03/30/JFZmLctvDs5kfPi.png"></p></li><li><p>これ：相当于英语中的this，这个， 离说话的人近</p></li><li><p>それ：相当于英语中的that，那个，离对方近</p></li><li><p>あれ：that，那个，离说话的两者都远</p></li><li><p>还有一个どれ，表示疑问（哪个）</p></li></ul><ol start="2"><li>それは 何（なん）ですか</li></ol><ul><li>なん, だれ 疑问词<ul><li>なん，什么东西</li><li>だれ，什么人</li></ul></li></ul><ol start="3"><li>あれは　だれ（誰）の　傘（かさ）ですか</li></ol><ul><li>の的使用方法，不能与“的”等同  <img src="https://s2.loli.net/2025/03/30/PIrdtwhpzi4ABmR.png">  最后一种准体助词的例子：  那本书是谁的？我的（私の）</li><li>この,その,あの,どの<ul><li>用于修饰名词</li><li>连体词，后面必须加一个体言（名词，代词）。相当于英语中的my</li><li>この：这个xxx</li><li>その：那个xxx</li><li>あの：那个xxx</li></ul></li></ul><ol start="4"><li>疑问词どれ、どの<ul><li>是在三个以上的事物中，不能确定是哪一个时所用的疑问词。</li><li>長島（ながしま）さんの傘は　どれ　ですか</li><li>小野（おの）さんの　机は　どの（机）　ですか</li></ul></li></ol><h2 id="表达"><a href="#表达" class="headerlink" title="表达"></a>表达</h2><ol><li>询问年龄<ul><li>何歳ですか、口语化</li><li>おいくつですか、比较礼貌问长辈用</li></ul></li><li>どうも　ありがとう　ございます<ul><li>どうも 可以加强谢意</li><li>如果略表谢意，直接省略后面的“ありがとう　ございます”，直接用どうも</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;课文&quot;&gt;&lt;a href=&quot;#课文&quot; class=&quot;headerlink&quot; title=&quot;课文&quot;&gt;&lt;/a&gt;课文&lt;/h2&gt;&lt;p&gt;对话A：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!important]&lt;br&gt;これは　テレビですか&lt;br&gt;いいえ、それは　テレビでは　あ</summary>
      
    
    
    
    <category term="日语" scheme="https://cloudnzk.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
    <category term="学习" scheme="https://cloudnzk.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://cloudnzk.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="新标日" scheme="https://cloudnzk.github.io/tags/%E6%96%B0%E6%A0%87%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>日本语学习笔记-新标日初级第1课</title>
    <link href="https://cloudnzk.github.io/2021/05/22/nihongo-notes-lesson1/"/>
    <id>https://cloudnzk.github.io/2021/05/22/nihongo-notes-lesson1/</id>
    <published>2021-05-22T08:35:39.000Z</published>
    <updated>2025-03-30T08:52:06.956Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>新标日第一单元的单词，句子  </p></blockquote><h1 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h1><ol><li>李さんは　中国人（ちゅうごくじん）です<ul><li>は读wa，は助词的作用：==提示主题==。助词和前面的单词是一起的。</li><li>です 动词，==”是…“==。日语的谓语放在最后</li><li>A はB　A，B可以填入体言（名词，代词，助数词），还有一种叫用言（动词，形容词）</li></ul></li><li>森さんは　がくせんでは/じゃ　ありません<ul><li>“では　ありません”是==“です”的否定==，表示不是</li><li>“では　ありません”中的“では”，在口语中有时会发成“じゃ”</li></ul></li><li>李さんは日本人ですか<ul><li>“か”放在句尾表示==疑问==</li><li>はい,そうです　</li><li>いいえ,ちがいます（不是）</li></ul></li><li>私 の 父<ul><li>表示前面的名词是后面名词==从属的==机构、国家或属性</li></ul></li></ol><h1 id="表达及词语讲解"><a href="#表达及词语讲解" class="headerlink" title="表达及词语讲解"></a>表达及词语讲解</h1><h2 id="1-人名、称谓"><a href="#1-人名、称谓" class="headerlink" title="1.人名、称谓"></a>1.人名、称谓</h2><p><img src="https://s2.loli.net/2025/03/30/cvsEt9jKHMRkAUh.png"></p><p>(1)人称代词</p><ul><li>私(わたし) 第一人称</li><li>あなた　非常正式的称谓，用于同辈之间、长辈对晚辈、妻子对丈夫。在不知道对方姓名的时候才会使用第二人称，否则会不太礼貌</li><li>あの人 第三人称，那个人</li><li>彼（かれ），他</li><li>彼女（かのじょ），她</li></ul><p>(2)礼貌称呼</p><ul><li>さん，通用称呼</li><li>ちゃん，小孩或者亲密的人</li><li>君(くん)，年龄相当的男性</li><li>方（かた），这位</li><li>様(さま)，大人</li></ul><p>(3)职业职务</p><ul><li>先生(せんせい)</li><li>社長(しゃちょう)</li><li>課長(かちょう)</li></ul><h2 id="2-省略"><a href="#2-省略" class="headerlink" title="2.省略"></a>2.省略</h2><p>在会话中，多省略第一、第二人称的主语。比如：</p><p>(あなたは)　吉田さんですか</p><p>——いいえ、(私は)　吉田じゃ　ありません</p><h2 id="3-寒暄语"><a href="#3-寒暄语" class="headerlink" title="3.寒暄语"></a>3.寒暄语</h2><p>初めまして,どうぞ　よろしく お願いいたします　（初次见面，请多关照）</p><p>——こちらこそ、どうぞ　よろしく お願いいたします</p><p>すみませ　(excuse me)</p><p>どうも　すみません （非常抱歉）</p><h2 id="4-数字（かず-すうじ）"><a href="#4-数字（かず-すうじ）" class="headerlink" title="4.数字（かず　すうじ）"></a>4.数字（かず　すうじ）</h2><blockquote><p>课本20页，44页  </p></blockquote><h3 id="1到10位"><a href="#1到10位" class="headerlink" title="1到10位"></a>1到10位</h3><p>いち</p><p>に</p><p>さん</p><p>し　よん</p><p>ご</p><p>ろく</p><p>しち　なな</p><p>はち</p><p>く　きゅう</p><p>じゅう</p><h3 id="十位"><a href="#十位" class="headerlink" title="十位"></a>十位</h3><p>同汉语读法，86：はち じゅう ろく</p><h3 id="百位"><a href="#百位" class="headerlink" title="百位"></a>百位</h3><p>ひゃく</p><h3 id="千位"><a href="#千位" class="headerlink" title="千位"></a>千位</h3><p>せん</p><h3 id="万位"><a href="#万位" class="headerlink" title="万位"></a>万位</h3><p>まん</p><h3 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h3><p>れい　てん　いち</p><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><p>さん　ぶん　の　いち</p><h1 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h1><p>==太生僻的不用背==</p><h2 id="国家"><a href="#国家" class="headerlink" title="国家"></a>国家</h2><p>ちゅうごくじん（中国人）</p><p>にほんじん（日本人）</p><p>かんこくじん（韓国人）</p><p>アメリカじん</p><p>フランスじん</p><h2 id="职位"><a href="#职位" class="headerlink" title="职位"></a>职位</h2><p><strong>がくせい</strong>（学生）</p><p>りゅう<strong>がくせい</strong>（留学生）</p><p>せんせい（先生）</p><p>きょうじゅ（教授）</p><p><strong>しゃいん</strong>（社員）</p><p>かいしゃいん（会社員）</p><p>てん<strong>いん</strong>（店員）</p><p>けんしゅうせい（研修生）</p><p>だいがく（大学）</p><p>か<strong>ちょう</strong>（課長）</p><p>しゃちょう（社長）</p><h2 id="人名、专有名词"><a href="#人名、专有名词" class="headerlink" title="人名、专有名词"></a>人名、专有名词</h2><p>ちち</p><p>わたし</p><p>あなた</p><p>あのひと（あの人）</p><p>り（李）</p><p>おう（王）</p><p>ちょう（張）</p><p>もり（森）</p><p>はやし（林）</p><p>おの（野）</p><p>よしだ（吉田）</p><p>たなか（田中）</p><p>なかむら（中村）</p><p>たろう（大郎）</p><p>キム（金）</p><p>デュポン</p><p>スミス</p><p>ちゅうごく</p><p>とうきょう<strong>だいがく</strong>（東京大学）</p><p>ペキンだいがく（北京大学）</p><p>ペキンりょこうしゃ（北京旅行社）</p><p>ジェーシーきかく（JC企画）</p><p>にっちゅうしょうじ（日中商事）</p><h2 id="对话"><a href="#对话" class="headerlink" title="对话"></a>对话</h2><p>でむかえ(出迎え)</p><p>はい</p><p>いいえ</p><p>どうも</p><p>あっ</p><p>こんにちは</p><p>すみません</p><p>どうぞ</p><p>よろしくおねがいします（よろしくお願いします）</p><p>はじめまして</p><p>こちらこそう</p><p>そうです</p><p>ちがいます</p><p>わかりません（分かりません）</p><p>どうもしみませ</p><p>くん/さん</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>国家</td><td>人</td><td>语言</td></tr><tr><td>ちゅうごく　中国，发长音</td><td>ちゅうごくじん</td><td>ちゅうごくご</td></tr><tr><td>にほん　日本</td><td>在国家后面加　じん</td><td>在国家后面加 ご</td></tr><tr><td>かんこく　韓国</td><td></td><td></td></tr><tr><td>アメリカ</td><td></td><td></td></tr><tr><td>フランス</td><td></td><td></td></tr></tbody></table><p>背单词的好办法，拆分单词记住每个汉字的读音，这样遇到这个字就会读了</p><p><img src="https://s2.loli.net/2025/03/30/8XLohYJBPmWsuce.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;新标日第一单元的单词，句子  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;句子&quot;&gt;&lt;a href=&quot;#句子&quot; class=&quot;headerlink&quot; title=&quot;句子&quot;&gt;&lt;/a&gt;句子&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;李さんは　中国人（ちゅうごく</summary>
      
    
    
    
    <category term="日语" scheme="https://cloudnzk.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
    <category term="学习" scheme="https://cloudnzk.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://cloudnzk.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="新标日" scheme="https://cloudnzk.github.io/tags/%E6%96%B0%E6%A0%87%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>日本语学习笔记-五十音</title>
    <link href="https://cloudnzk.github.io/2021/05/22/nihongo-notes-gojyuuon/"/>
    <id>https://cloudnzk.github.io/2021/05/22/nihongo-notes-gojyuuon/</id>
    <published>2021-05-22T08:23:49.000Z</published>
    <updated>2025-03-30T08:47:59.719Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五十音"><a href="#五十音" class="headerlink" title="五十音"></a>五十音</h1><h4 id="五十音图"><a href="#五十音图" class="headerlink" title="五十音图"></a>五十音图</h4><table><thead><tr><th>Property</th><th>あ段</th><th>い段</th><th>う段</th><th>え段</th><th>お段</th></tr></thead><tbody><tr><td>あ行</td><td>あア</td><td>いイ</td><td>うウ</td><td>えエ</td><td>おオ</td></tr><tr><td>か行</td><td>かカ</td><td>きキ</td><td>くク</td><td>けケ</td><td>こコ</td></tr><tr><td>さ行</td><td>さサ</td><td>しシ</td><td>すス</td><td>せセ</td><td>そソ</td></tr><tr><td>た行</td><td>たタ</td><td>ちチ</td><td>つツ</td><td>てテ</td><td>とト</td></tr><tr><td>な行</td><td>なナ</td><td>にニ</td><td>ぬヌ</td><td>ねネ</td><td>のノ</td></tr><tr><td>は行</td><td>はハ</td><td>ひヒ</td><td>ふフ</td><td>へヘ</td><td>ほホ</td></tr><tr><td>や行</td><td>やヤ</td><td>（いイ）</td><td>ゆユ</td><td>（えエ）</td><td>よヨ</td></tr><tr><td>ま行</td><td>まマ</td><td>みミ</td><td>むム</td><td>めメ</td><td>もモ</td></tr><tr><td>ら行</td><td>らラ</td><td>りリ</td><td>るル</td><td>れレ</td><td>ろロ</td></tr><tr><td>わ行</td><td>わワ</td><td>（いイ）</td><td>（うウ）</td><td>（えエ）</td><td>をヲ</td></tr><tr><td>ん行</td><td>んン</td><td></td><td></td><td></td><td></td></tr></tbody></table><h4 id="浊音"><a href="#浊音" class="headerlink" title="浊音"></a>浊音</h4><table><thead><tr><th>Property</th><th>あa</th><th>いi</th><th>うu</th><th>えe</th><th>おo</th></tr></thead><tbody><tr><td>がｇ</td><td>がガ</td><td>ぎギ</td><td>ぐグ</td><td>げゲ</td><td>ごゴ</td></tr><tr><td>ざｚ</td><td>ざザ</td><td>じジ</td><td>ずズ</td><td>ぜゼ</td><td>ぞゾ</td></tr><tr><td>だｄ</td><td>だダ</td><td>ぢヂ</td><td>づヅ</td><td>でデ</td><td>どド</td></tr><tr><td>ばｂ</td><td>ばバ</td><td>びビ</td><td>ぶブ</td><td>べベ</td><td>ぼボ</td></tr><tr><td>ぱp</td><td>ぱパ</td><td>ぴピ</td><td>ぷプ</td><td>ぺぺ</td><td>ぽポ</td></tr></tbody></table><h4 id="拗音"><a href="#拗音" class="headerlink" title="拗音"></a>拗音</h4><table><thead><tr><th>Property</th><th>ゃ</th><th>ゅ</th><th>ょ</th></tr></thead><tbody><tr><td>きki</td><td>きゃキャ</td><td>きゅキュ</td><td>きょキョ</td></tr><tr><td>しshi</td><td>しゃシャ</td><td>しゅシュ</td><td>しょショ</td></tr><tr><td>ちchi</td><td>ちゃチャ</td><td>ちゅチュ</td><td>ちょチョ</td></tr><tr><td>にni</td><td>にゃニャ</td><td>にゅニュ</td><td>にょニョ</td></tr><tr><td>ひhi</td><td>ひゃヒャ</td><td>ひゅヒュ</td><td>ひょヒョ</td></tr><tr><td>みmi</td><td>みゃミャ</td><td>みゅミュ</td><td>みょミョ</td></tr><tr><td>りri</td><td>りゃリャ</td><td>りゅリュ</td><td>りょリョ</td></tr><tr><td>ぎgi</td><td>ぎゃギャ</td><td>ぎゅギュ</td><td>ぎょギョ</td></tr><tr><td>じji</td><td>じゃジャ</td><td>じゅジュ</td><td>じょジョ</td></tr><tr><td>びbi</td><td>びゃビャ</td><td>びゅビュ</td><td>びょビョ</td></tr><tr><td>ぴpi</td><td>ぴゃピャ</td><td>ぴゅピュ</td><td>ぴょピョ</td></tr></tbody></table><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><ul><li>あめ（雨）、アニメ（动画）</li><li>いす（椅子）、イチゴ（草莓）</li><li>うた（歌）、ウーロン茶（乌龙茶）</li><li>えほん(絵本)、エンジニア（工程师）</li><li>おわり(終わり)、オレンジ（橙子）</li><li>かばん（背包）、カメラ（相机）</li><li>きの（昨日）、キング（国王）</li><li>くつ（靴）、クラス（班级）</li><li>けれど（但是）、ケーキ（蛋糕）</li><li>こいびと（恋人）､コーヒー（咖啡）</li><li>さくら(桜)、サービス（服务）</li><li>しごと（工作）、シルク（丝绸）</li><li>すし（寿司）、スープ（汤）</li><li>せんせい（老师）、セーター（毛衣）</li><li>そと（外面）、ソフト（软件）</li><li>たまご（鸡蛋）、タクシー（出租车）</li><li>ちず（地図）、チケット（奶酪）</li><li>つくえ（桌子）、ツリー（树）</li><li>てがみ（信笺）、テレビ（电视）</li><li>とけい（时钟）、トマト（西红柿）</li><li>なまえ（名字）、ナシ（梨）</li><li>にほんじん（日本人）、ニュース（新闻）</li><li>ぬの（布）、ヌードル（面条）</li><li>ねこ（猫）、ネクタイ（领带）</li><li>のわら（平原）、ノート（笔记本）</li><li>はる（春）、ハンカチ（手帕）</li><li>ひと（人）、ヒーロー（英雄）</li><li>ふるかわ（古川）、フランス（法国）</li><li>へや（屋子）、ヘア（头发）</li><li>ほん（书本）、ホテル（旅馆）</li><li>まち（街道）、まーく（标记）</li><li>みず（水）、ミカン（柑橘）</li><li>むしし（蟲師）、ムーン（月亮）</li><li>めがね（眼镜）、メール（邮件）</li><li>もしもし（喂喂）、モデル（模特）</li><li>やま（山）、ヤング（年轻人）</li><li>ゆき（雪）、ユーモア（幽默）</li><li>よる（夜晚）、ヨルシカ（夜鹿）</li><li>らいねん（来年）、ラーメン（拉面）</li><li>りそう（理想）、リンゴ（苹果）</li><li>るいじ（类似）、ルート（道路）</li><li>れいぞうこ（冷蔵庫）、レポート（报告）</li><li>ろんぶん（論文）、ロシア（玫瑰）</li><li>わたし（我）、ワーク（工作）</li><li>を、ヲ</li><li>にんげん（人間）、ハンカチ（手帕）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;五十音&quot;&gt;&lt;a href=&quot;#五十音&quot; class=&quot;headerlink&quot; title=&quot;五十音&quot;&gt;&lt;/a&gt;五十音&lt;/h1&gt;&lt;h4 id=&quot;五十音图&quot;&gt;&lt;a href=&quot;#五十音图&quot; class=&quot;headerlink&quot; title=&quot;五十音图&quot;&gt;&lt;/a&gt;五十音</summary>
      
    
    
    
    <category term="日语" scheme="https://cloudnzk.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
    <category term="学习" scheme="https://cloudnzk.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://cloudnzk.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="新标日" scheme="https://cloudnzk.github.io/tags/%E6%96%B0%E6%A0%87%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>日本语学习笔记-入门</title>
    <link href="https://cloudnzk.github.io/2021/05/21/nihongo-notes-start/"/>
    <id>https://cloudnzk.github.io/2021/05/21/nihongo-notes-start/</id>
    <published>2021-05-21T12:32:11.000Z</published>
    <updated>2025-03-30T08:24:19.496Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>详细的发音请看新标日上册  </p></blockquote><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><ul><li>每天学习 1-2h</li><li>记录下没见过的语法，句型。写在笔记本上</li><li>跟随录音朗读课文，单词</li><li>认真完成课后练习，写在笔记本上</li></ul><h2 id="日语特征"><a href="#日语特征" class="headerlink" title="日语特征"></a>日语特征</h2><ul><li>属于粘着语</li><li>谓语在句尾，助词来粘合 ⇒ 语序不影响语义</li></ul><pre class="line-numbers language-JavaScript" data-language="JavaScript"><code class="language-JavaScript">猫は魚を食べました魚を猫は食べました<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>名词、代词、数量词没有性（阴性阳性）、数（单数复数）、格（主格宾格）的变化</li><li>遣词造句男女有别，如わたし、あたし</li></ul><h2 id="日语文字"><a href="#日语文字" class="headerlink" title="日语文字"></a>日语文字</h2><ul><li>平假名（ひらがな）</li><li>片假名（かたかな）</li><li>汉字（漢字）</li></ul><h3 id="日语汉字"><a href="#日语汉字" class="headerlink" title="日语汉字"></a>日语汉字</h3><p>音读：模仿汉字读音，将古代传来的汉语读音日语化</p><p>训读：将固有日语发音与汉字相结合</p><h2 id="发音"><a href="#发音" class="headerlink" title="发音"></a>发音</h2><h3 id="元音"><a href="#元音" class="headerlink" title="元音"></a>元音</h3><p>读的干脆利落一点，不要拖出长音。</p><p>放松脸部，自然发出。日语自然发音时，唇形变化比汉语小。</p><p>同一列（段）的假名，发音方法相同</p><h3 id="声调"><a href="#声调" class="headerlink" title="声调"></a>声调</h3><ul><li>通过音节之间的高低变化表示不同的含义。单词的声调不同含义也不同</li><li>单词的第一个音节和第二个音节的音高不同，第一个音节高则第二个低，第一个音节低则第二个高</li><li>一个单词的声调中，或没有下降，后或只有一个下降</li></ul><p>发好声调，语调就能读好日语了。</p><h2 id="常用寒暄用语"><a href="#常用寒暄用语" class="headerlink" title="常用寒暄用语"></a>常用寒暄用语</h2><ol><li> おはようございます</li><li>こんにちは</li><li>さようなら</li><li>こんばんは</li><li>おやすみなさい</li><li>はじめまして。どうぞ　よろしく　お願いします</li><li>すみませ</li><li>ありがとうございます<ul><li>いいえ、どういたしまして</li></ul></li><li>いただきます</li><li>ごちそうさまでした</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;详细的发音请看新标日上册  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;学习方法&quot;&gt;&lt;a href=&quot;#学习方法&quot; class=&quot;headerlink&quot; title=&quot;学习方法&quot;&gt;&lt;/a&gt;学习方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;每天学习 1-</summary>
      
    
    
    
    <category term="日语" scheme="https://cloudnzk.github.io/categories/%E6%97%A5%E8%AF%AD/"/>
    
    
    <category term="学习" scheme="https://cloudnzk.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="笔记" scheme="https://cloudnzk.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="新标日" scheme="https://cloudnzk.github.io/tags/%E6%96%B0%E6%A0%87%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cloudnzk.github.io/2019/03/09/hello-world/"/>
    <id>https://cloudnzk.github.io/2019/03/09/hello-world/</id>
    <published>2019-03-08T16:00:00.000Z</published>
    <updated>2023-06-16T14:44:57.641Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a target="_blank" rel="noopener" href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a target="_blank" rel="noopener" href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a target="_blank" rel="noopener" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a target=&quot;_blank&quot; rel</summary>
      
    
    
    
    
  </entry>
  
</feed>
