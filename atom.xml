<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Silentlight&#39;s blog</title>
  
  <subtitle>不想继续逃避现实了</subtitle>
  <link href="https://cloudnzk.github.io/atom.xml" rel="self"/>
  
  <link href="https://cloudnzk.github.io/"/>
  <updated>2023-06-08T09:42:25.701Z</updated>
  <id>https://cloudnzk.github.io/</id>
  
  <author>
    <name>Silentlight</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>邂逅前端与学习建议</title>
    <link href="https://cloudnzk.github.io/2023/06/08/introduce-frontend/"/>
    <id>https://cloudnzk.github.io/2023/06/08/introduce-frontend/</id>
    <published>2023-06-08T09:35:01.000Z</published>
    <updated>2023-06-08T09:42:25.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端开发工程师职责"><a href="#前端开发工程师职责" class="headerlink" title="前端开发工程师职责"></a>前端开发工程师职责</h2><ul><li>主要负责的：web（网站、后台管理系统、手机H5）、小程序端</li><li>也可做：移动端（uniapp、React Native）、桌面端（Electron）、服务器开发（Node.js）</li></ul><p>老师建议：先把主要负责的学习好，再学习其他的。</p><h2 id="前端职业发展"><a href="#前端职业发展" class="headerlink" title="前端职业发展"></a>前端职业发展</h2><h3 id="行业内卷"><a href="#行业内卷" class="headerlink" title="行业内卷"></a>行业内卷</h3><p>你不学也有人学，不学的话会被淘汰</p><h3 id="个人焦虑"><a href="#个人焦虑" class="headerlink" title="个人焦虑"></a>个人焦虑</h3><p>25岁开始为35岁焦虑？建议尽早个人规划，下面是程序员的基本上升路线：</p><p><img src="https://s2.loli.net/2023/06/08/Ub5taGTnMPXE2hz.png" alt="截屏2023-06-08 下午4.09.51"></p><h3 id="如何实现个人成长？"><a href="#如何实现个人成长？" class="headerlink" title="如何实现个人成长？"></a>如何实现个人成长？</h3><p>实际情况，个人成长和公司发展往往有冲突。例如：</p><ul><li>每天写不完的业务需求，没有技术含量的代码</li><li>每天加班到凌晨，996</li></ul><p>老师建议：</p><ul><li>情况一：如果公司的项目目前可以给你带来很大的成长，那么不要抱怨，好好学习，快速成长</li><li>情况二：如果是机械性的业务重复，学会拒绝，把时间放到个人成长上</li></ul><h3 id="如何技术进步？"><a href="#如何技术进步？" class="headerlink" title="如何技术进步？"></a>如何技术进步？</h3><ol><li>官方文档<ul><li>如何抓住重点</li><li>如何进行实战练习</li><li>更多作为查阅的手册</li></ul></li><li>看书学习<ul><li>书的质量必须很高</li><li>必须动手进行练习</li><li>遇到问题如何解决</li></ul></li><li>开源项目<ul><li>非常好的学习手段</li><li>需要具备一定的学习能力，需要一定的基础</li></ul></li><li>视频课程</li></ol><h2 id="前端知识体系"><a href="#前端知识体系" class="headerlink" title="前端知识体系"></a>前端知识体系</h2><p><img src="https://s2.loli.net/2023/06/08/2K6YwzlV8rgCxIF.png" alt="截屏2023-06-08 上午2.51.11"></p><h2 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h2><ul><li><p>保持”空杯心态“，才能持续不断的进步</p></li><li><p>不要给自己设限，不要让自己局限于前端开发。其实大多数技术，思想都是相通的</p></li><li><p>做好知识储备</p><ul><li>到公司是要实打实做项目的，没那么多时间再学</li><li>把基础打扎实了，能更快地学习新知识</li></ul></li><li><p>将知识点进行分类，不可能全部都掌握</p><ul><li>不常用的知识，知道有它，知道在哪里查</li><li>常用的知识，经常使用，熟能生巧，烂熟于心</li></ul></li></ul><blockquote><p> 笔记由个人整理而成，方便今后复习。文中内容与图片的版权均归 coderwhy 老师所有。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端开发工程师职责&quot;&gt;&lt;a href=&quot;#前端开发工程师职责&quot; class=&quot;headerlink&quot; title=&quot;前端开发工程师职责&quot;&gt;&lt;/a&gt;前端开发工程师职责&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;主要负责的：web（网站、后台管理系统、手机H5）、小程序端&lt;/li&gt;
</summary>
      
    
    
    
    <category term="笔记" scheme="https://cloudnzk.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="前端" scheme="https://cloudnzk.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="课程笔记" scheme="https://cloudnzk.github.io/tags/%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
    <category term="coderwhy" scheme="https://cloudnzk.github.io/tags/coderwhy/"/>
    
  </entry>
  
  <entry>
    <title>盘点使用过的图床</title>
    <link href="https://cloudnzk.github.io/2023/05/28/picture-bed-summary/"/>
    <id>https://cloudnzk.github.io/2023/05/28/picture-bed-summary/</id>
    <published>2023-05-28T04:46:45.000Z</published>
    <updated>2023-06-11T12:04:54.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="盘点使用过的图床"><a href="#盘点使用过的图床" class="headerlink" title="盘点使用过的图床"></a>盘点使用过的图床</h1><p>由于平时偶尔会写写博客，所以使用过很多的图床工具，在文章里展示图片。下面总结了一下使用过的图床工具。</p><p>挑选图床工具通常需要考虑三个因素：<code>价格</code>、<code>稳定性</code>和<code>访问速度</code>。三者不可兼得，如果要求图片稳定不丢失而且访问速度快的，一般都要充值</p><table><thead><tr><th>图床名称</th><th>收费与否</th><th>稳定性</th><th>访问速度</th><th>部署难度</th><th>是否支持PicGo</th></tr></thead><tbody><tr><td>阿里OSS</td><td>按量计费或购买资源包</td><td>高</td><td>快</td><td>较难</td><td>是</td></tr><tr><td>七牛云</td><td>10GB免费额度</td><td>高</td><td>快</td><td>较难</td><td>是</td></tr><tr><td>SM.MS</td><td>5GB免费额度</td><td>较高</td><td>较快</td><td>简单</td><td>是</td></tr><tr><td>路过</td><td>免费</td><td>中等</td><td>较快</td><td>简单</td><td>否</td></tr><tr><td>GitHub</td><td>免费</td><td>高</td><td>慢</td><td>中等</td><td>是</td></tr></tbody></table><h2 id="阿里云OSS"><a href="#阿里云OSS" class="headerlink" title="阿里云OSS"></a>阿里云OSS</h2><ul><li>个人目前正在使用的一个图床工具，价格便宜，对于<code>访问量小</code>的博客站非常适合。收费 = <code>存储费用</code> + <code>流量费用</code> + <code>请求费用</code>。</li><li>存储费用分为两种计费方式：第一种是<code>按量计费</code>，0.12每月每GB；第二种是买<code>资源包</code>，9块40GB一年，还是挺划算的。</li><li>流量费用是 00:00-08:00（闲时）：0.25元/GB，08:00-24:00（忙时）：0.50元/GB</li><li>请求费用：请求次数×0.01÷10000，每万次请求0.01元，对于小站而言几乎可以忽略不计</li><li>类似的产品还有<code>腾讯云COS</code>，没用过就不做评价了</li></ul><h2 id="七牛云"><a href="#七牛云" class="headerlink" title="七牛云"></a>七牛云</h2><ul><li>身份认证后可以获得每月10GB的免费存储额度，可以白嫖</li><li>但需要注意的是，需要<code>自备域名</code>。否则等30天测试域名到期后，上传的文件会自动清空</li></ul><h2 id="SM-MS"><a href="#SM-MS" class="headerlink" title="SM.MS"></a>SM.MS</h2><ul><li>个人比较喜欢，最常用的一个<code>免费图床</code>，提供免费5GB的存储额度，其实也够用了</li><li>在国内的访问稳定性不能确定，未来有被封锁或者开发者跑路的可能性，但可能性也比较小，因为这个图床已经稳定运行8年多了。目前SM.MS提供了中国国内的专用域名，在国内也能正常访问</li></ul><h2 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a>路过图床</h2><ul><li>上传的图片有可能被删除，解释权完全在于服务提供者的手上。而且登录账户居然找不到以前上传过的图片…避雷</li><li>所以想要长期存储的就别用这个了，上传一些<code>临时</code>图片可以试用下</li></ul><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><ul><li>由于 SM.MS 白嫖版限制图片最大5MB，所以超过5MB的我都上传到GitHub上</li><li>优点是完全免费，上传的图片不用害怕丢失，但缺点在于用国内网络访问实在是太<code>慢</code>了！</li></ul><hr><h2 id="免费图床推荐"><a href="#免费图床推荐" class="headerlink" title="免费图床推荐"></a>免费图床推荐</h2><h3 id="Catbox"><a href="#Catbox" class="headerlink" title="Catbox"></a>Catbox</h3><ul><li>国外网站，已经稳定运行了8年之久</li><li>完全免费，可以白嫖。速度尚可</li><li>没有空间限制，最大上传200MB以内文件</li><li>负面消息：曾经屏蔽了大陆的IP</li></ul><h3 id="Imgbb"><a href="#Imgbb" class="headerlink" title="Imgbb"></a>Imgbb</h3><ul><li>国外图床网站，至少稳定运行了5年以上</li><li>完全免费，可以白嫖。速度一般，要求速度的建议用国内的CDN图床</li><li>没有空间限制，最大上传32MB以内的图片</li><li>对图片内容比较宽松，随便发涩图</li></ul><h3 id="流浪图床"><a href="#流浪图床" class="headerlink" title="流浪图床"></a>流浪图床</h3><ul><li>班友们喜欢用的一个图床，胜在免费可以白嫖</li><li>没有空间限制，最大上传5MB以内的图片</li><li>提供者是个人开发者，完全是为爱发电，稳定性未知</li></ul><blockquote><p>如果还有好用的图床，也可以在评论区推荐给我哦~</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;盘点使用过的图床&quot;&gt;&lt;a href=&quot;#盘点使用过的图床&quot; class=&quot;headerlink&quot; title=&quot;盘点使用过的图床&quot;&gt;&lt;/a&gt;盘点使用过的图床&lt;/h1&gt;&lt;p&gt;由于平时偶尔会写写博客，所以使用过很多的图床工具，在文章里展示图片。下面总结了一下使用过的图</summary>
      
    
    
    
    <category term="软件" scheme="https://cloudnzk.github.io/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
    <category term="图床" scheme="https://cloudnzk.github.io/tags/%E5%9B%BE%E5%BA%8A/"/>
    
    <category term="实用工具" scheme="https://cloudnzk.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    <category term="盘点" scheme="https://cloudnzk.github.io/tags/%E7%9B%98%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 热题 HOT 100 百日刷题打卡</title>
    <link href="https://cloudnzk.github.io/2022/12/08/leetcode-hot-100-notebook/"/>
    <id>https://cloudnzk.github.io/2022/12/08/leetcode-hot-100-notebook/</id>
    <published>2022-12-07T17:38:12.000Z</published>
    <updated>2022-12-12T08:37:22.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刷题计划"><a href="#刷题计划" class="headerlink" title="刷题计划"></a>刷题计划</h2><ul><li>一天坚持刷一道，三个月刷完简单和中等</li><li>刚开始的一个月先把简单刷完，再刷中等难度的</li><li>每天刷一道新题 + 重刷昨天的题</li></ul><h2 id="刷题方法"><a href="#刷题方法" class="headerlink" title="刷题方法"></a>刷题方法</h2><blockquote><p>极客时间覃超老师的“五毒神掌”刷题法</p><ol><li>第一遍<ul><li>5~10分钟：读题 + 思考，一定要先自己思考！<ul><li>若有思路，则写代码实现自己的思路</li><li>若无思路，则直接看前三名高赞解法。注意！多解法，比较各种解法优劣</li></ul></li><li>看完解法后先理解，写下大致的解题思路或者伪代码，方便后面复现</li><li>背诵默写比较好的解法，以后碰到类似的题就有思路了</li></ul></li><li>第二遍<ul><li>马上关掉答案，看看自己能不能再写出来。遇到 bug 也不用怕，一步一步 debug 提交通过</li><li>可以切到国际站看看国外大佬的高票题解，多种解法比较，体会 → 优化自己写的代码</li><li>及时总结，记录笔记</li></ul></li><li>第三遍<ul><li>过一天后，重刷前一天的题目</li><li>如果掌握程度不够，去做专项练习，补薄弱部分<ul><li>专项练习就是去刻意练习自己不熟悉的这类题</li><li>整理这类题的算法模板</li></ul></li></ul></li><li>第四遍<ul><li>过了一周之后，回来反复练习相同题目</li></ul></li><li>第五遍<ul><li>面试前的恢复训练：提前两三周重刷之前做过的题目</li></ul></li></ol></blockquote><p>总结：</p><ul><li>刷题只刷一遍是不够的！要反复刷！</li><li>要能有理解性的（默）写出来</li><li>坚持下去</li></ul><h2 id="打卡记录"><a href="#打卡记录" class="headerlink" title="打卡记录"></a>打卡记录</h2><table><thead><tr><th>题目</th><th>一刷时间</th><th>二刷时间</th><th>三刷时间</th><th>掌握程度</th><th>题目难度</th><th>标签</th></tr></thead><tbody><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/two-sum/">1. 两数之和</a></td><td>2022.11.23</td><td>2022.11.29</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>哈希表；数组</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/add-two-numbers/">2. 两数相加</a></td><td>2022.11.26</td><td>2022.11.30</td><td>…</td><td>⭐⭐</td><td>中等</td><td>链表；数学</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a></td><td>2022.11.26</td><td>2022.12.02</td><td>…</td><td>⭐⭐</td><td>中等</td><td>哈希表；字符串；滑动窗口</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></td><td>2022.11.27</td><td>2022.12.03</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>动态规划</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/counting-bits/">338. 比特位计数</a></td><td>2022.11.27</td><td>2022.12.04</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>动态规划</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></td><td>2022.11.28</td><td>2022.12.05</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/diameter-of-binary-tree/">543. 二叉树的直径</a></td><td>2022.11.28</td><td>2022.12.10</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/invert-binary-tree/">226. 翻转二叉树</a></td><td>2022.11.29</td><td>2022.12.06</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/hamming-distance/">461. 汉明距离</a></td><td>2022.12.01</td><td>2022.12.09</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>位运算</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字</a></td><td>2022.12.02</td><td>2022.12.07</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>位运算；数组</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></td><td>2022.12.03</td><td>2022.12.08</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS；栈</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/merge-two-binary-trees/">617. 合并二叉树</a></td><td>2022.12.04</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS；BFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/symmetric-tree/">101. 对称二叉树</a></td><td>2022.12.05</td><td>2022.12.11</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>二叉树；DFS；BFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/valid-parentheses/">20. 有效的括号</a></td><td>2022.12.06</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>栈；字符串</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></td><td>2022.12.07</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>中等</td><td>二叉树；BFS</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/majority-element/">169. 多数元素</a></td><td>2022.12.08</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>数组；哈希表；计数</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/linked-list-cycle/">141. 环形链表</a></td><td>2022.12.09</td><td>…</td><td>…</td><td>⭐⭐⭐</td><td>简单</td><td>哈希表；链表；双指针</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19. 删除链表的倒数第 N 个结点</a></td><td>2022.12.10</td><td>…</td><td>…</td><td>⭐⭐</td><td>中等</td><td>链表；双指针</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表</a></td><td>2022.12.11</td><td>…</td><td>…</td><td>⭐⭐</td><td>简单</td><td>链表；递归</td></tr><tr><td><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160. 相交链表</a></td><td>2022.12.12</td><td>…</td><td>…</td><td>⭐⭐</td><td>简单</td><td>链表；双指针；哈希表</td></tr></tbody></table><h2 id="刷题笔记"><a href="#刷题笔记" class="headerlink" title="刷题笔记"></a>刷题笔记</h2><h3 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h3><ul><li>暴力解法，<code>O(N^2)</code> 时间复杂度</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更好的解法：用哈希表空间换时间<ul><li>使用一个哈希表存储 nums 数组每个数的下标，如果 target - nums[i] 存在则返回结果，否则保存这个数的下标到哈希表中</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>i<span class="token punctuation">,</span>hash<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h3><ul><li>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补 0</li><li>同时遍历两个链表，逐位计算它们的和，并与当前位置的进位值相加<ul><li>而当前位计算结束后同样需要更新进位值</li></ul></li><li>此外，如果链表遍历结束后，有 <code>carry &gt; 0</code>，还需要在答案链表的后面附加一个节点，节点的值为 <code>carry</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> carry <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> a <span class="token operator">=</span> l1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l1<span class="token punctuation">.</span>val        <span class="token keyword">const</span> b <span class="token operator">=</span> l2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l2<span class="token punctuation">.</span>val        <span class="token keyword">const</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> carry        <span class="token comment">// 分为头节点和非头节点两种情况</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> head        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>            tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span><span class="token comment">// 计算进位，这里要向下取整，不然是小数</span>        carry <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果两个链表都走完了，还有进位，要新创建一个节点保存这个进位</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h3><ul><li><strong>滑动窗口</strong>，使用两个指针表示字符串中的某个子串（或窗口）的左右边界：<code>[start,end]</code></li><li>然后我们可以不断地向右移动右指针，直到跟 <code>[start,end]</code> 里面的字符重复，记录下这个无重复子串的长度</li><li>将左指针 <code>start</code> 向右移动一位，更新起始的位置</li><li>更新后的 <code>[start,end]</code> 里面的字符仍不重复，继续移动右指针</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> rk <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span>length    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token comment">// 为什么这里要判断 rk+1 而不是 rk？</span>        <span class="token comment">// 因为 [i,rk] 不重复，需要判断 rk+1 与 [i,rk] 内的字符是否重复</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rk <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hash<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>rk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>rk<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            rk<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> rk <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h3><ul><li>递归版会超时，用动态规划来做</li><li>定义 <code>dp[n]</code>：在第 n 阶爬楼梯的方法数，每次可以爬 1 或 2 阶</li><li>状态转移方程：<code>dp[n] = dp[n-1] + dp[n-2]</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="338-比特位计数"><a href="#338-比特位计数" class="headerlink" title="338.比特位计数"></a>338.比特位计数</h3><ul><li>动态规划 O(N) 时间复杂度</li><li>判断是不是 2 的 n 次方，如果是说明二进制1的个数只有1个</li><li>状态转移方程：<code>dp[i] = dp[i - Math.pow(2, Math.floor(Math.log2(i))) ] + 1</code>。用一个数举例，比如 7 = 4 + 3，dp[7] = dp[3] + 1</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">countBits</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> sum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log2</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span> <span class="token operator">===</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一种更好的办法（规律），基于奇偶数判断</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">countBits</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104.二叉树的最大深度"></a>104.二叉树的最大深度</h3><ul><li>以 root 为根节点的二叉树最大深度：Math.max(左子树的最大深度，右子树的最大深度) + 1</li><li>如果访问到空节点，则返回 0</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> root <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543.二叉树的直径"></a>543.二叉树的直径</h3><ul><li>最初的解法：递归里面有其他递归，时空间复杂度都很高</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">diameterOfBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// return maxDepth(root.left) + maxDepth(root.right)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">maxDepth</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> root <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>跟二叉树的最大深度这题很类似，转换为求解<strong>每个</strong>节点（并不只是根节点）的左右子树最大深度之和的最大值</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">diameterOfBinaryTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans        <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 到达空节点则返回 0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token comment">// 左子树最大深度</span>        <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token comment">// 右子树最大深度</span>        <span class="token comment">// 比较每个节点的直径，更新最大值</span>        ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">// 返回节点深度</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226.翻转二叉树"></a>226.翻转二叉树</h3><ul><li>递归版：采用前序遍历<ul><li>交换当前节点的左节点和右节点</li><li>递归左子树和右子树</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">[</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root<span class="token punctuation">.</span>left<span class="token punctuation">]</span>  <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token keyword">return</span> root<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>递归版：采用后序遍历，自底向上</p><ul><li>如果当前遍历到的节点 <code>root</code> 的左右两棵子树都已经翻转，那么我们只需要交换两棵子树的位置，即可完成以 <code>root</code> 为根节点的整棵子树的翻转。</li></ul></li></ul>  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 后序遍历，从下往上交换</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> leftNode <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token keyword">let</span> rightNode <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> rightNode    root<span class="token punctuation">.</span>right <span class="token operator">=</span> leftNode    <span class="token keyword">return</span> root<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>非递归版：采用层序遍历，从上往下交换左节点和右节点</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">invertTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">||</span> node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">[</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>node<span class="token punctuation">.</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>node<span class="token punctuation">.</span>left<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="461.汉明距离"></a>461.汉明距离</h3><p>其实就是求异或，然后求二进制中 1 的个数</p><ul><li>最开始用的是最笨的方法<ul><li>求完异或，使用 <code>toString(2)</code> 将结果转换为二进制</li><li>然后迭代二进制字符串统计 1 的个数</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hammingDistance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">^</span> y    <span class="token keyword">let</span> binary_str <span class="token operator">=</span> sum<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> binary_str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>binary_str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更优的解法<ul><li>将异或值的每一位都与 1 进行与操作，统计结果为 1 的数量</li><li>每次与操作完成后，将异或值右移一位，直到为 0</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hammingDistance</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> sum <span class="token operator">=</span> x <span class="token operator">^</span> y    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>sum <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        sum <span class="token operator">>>=</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136.只出现一次的数字"></a>136.只出现一次的数字</h3><ul><li>这题简单，对所有数求异或就行了。因为其他数都出现两次，而相同的数异或值为 0，最后得到的就是只出现一次的数字</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">singleNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">^=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94.二叉树的中序遍历"></a>94.二叉树的中序遍历</h3><ul><li>递归法</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>    <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">inorder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>ans</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历顺序：左->根->右</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>        ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span>        <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span>ans<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>非递归法，利用栈</p><ul><li><p>除了定义一个栈之外，还需要一个指针用于遍历节点</p></li><li><p>根据左子树优先遍历的原则，一直往左走并将访问的节点放入栈中</p><ul><li><blockquote><p>记忆：中序遍历不忘“左链入栈”</p></blockquote></li></ul></li><li><p>直到到达左子树的最左端，访问到空节点时将节点出栈</p></li><li><p>处理右子树</p></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> root    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">||</span> cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617.合并二叉树"></a>617.合并二叉树</h3><ul><li><p>递归三部曲</p><blockquote><p><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/merge-two-binary-trees/solution/by-carlsun-2-jroe/">https://leetcode.cn/problems/merge-two-binary-trees/solution/by-carlsun-2-jroe/</a></p></blockquote><ul><li><strong>确定递归函数的参数和返回值</strong><ul><li>参数就是传入两个二叉树的根节点</li><li>返回值就是合并之后二叉树的根节点</li></ul></li><li><strong>确定终止条件</strong><ul><li>如果 <code>root1</code> 和 <code>root2</code> 都为 <code>null</code>，停止往下递归</li></ul></li><li><strong>确定单层递归的逻辑</strong><ul><li>用的是二叉树的先序遍历</li><li>先合并两棵二叉树的根节点</li><li>再递归左子树和右子树，给根节点的左节点和右节点赋值</li></ul></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">mergeTrees</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span> root2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">||</span> root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> a <span class="token operator">=</span> root1 <span class="token operator">?</span> root1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span>        <span class="token keyword">let</span> b <span class="token operator">=</span> root2 <span class="token operator">?</span> root2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>        root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1 <span class="token operator">?</span> root1<span class="token punctuation">.</span>left <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>root2 <span class="token operator">?</span> root2<span class="token punctuation">.</span>left <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1 <span class="token operator">?</span> root1<span class="token punctuation">.</span>right <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>root2 <span class="token operator">?</span> root2<span class="token punctuation">.</span>right <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h3><ul><li><p>根节点左子树：<code>left</code>，根节点右子树：<code>right</code></p></li><li><p>比较（<code>left</code> 的左节点和 <code>right</code> 的右节点） &amp;&amp; （<code>right</code> 的左节点和 <code>left</code> 的右节点）是否相同</p><ul><li>如果有一个为空则返回 false</li><li>如果两个值不同则返回 false</li></ul></li><li><p>递归终止条件</p><ul><li>都为空指针则返回 true</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isSymmetric</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">return</span> <span class="token function">isSymmetric2</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isSymmetric2</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span>root2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> root2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> root2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>val <span class="token operator">!==</span> root2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">isSymmetric2</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>left<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isSymmetric2</span><span class="token punctuation">(</span>root1<span class="token punctuation">.</span>right<span class="token punctuation">,</span>root2<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h3><ul><li>如果迭代到左括号，将其进栈</li><li>如果迭代到右括号，将其与栈顶比较是否成对<ul><li>如果成对则弹出栈顶元素</li></ul></li><li>如果最后栈为空，则说明是有效括号</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 把左括号进栈</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'&#123;'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 如果遇到非法字符直接返回结果</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>                        <span class="token keyword">let</span> top <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment">// 如果遍历到的右括号与栈顶的左括号对应上，则将左括号出栈</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">===</span> <span class="token string">'('</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'&#125;'</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">===</span> <span class="token string">'&#123;'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">']'</span> <span class="token operator">&amp;&amp;</span> top <span class="token operator">===</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102.二叉树的层序遍历"></a>102.二叉树的层序遍历</h3><ul><li>BFS 使用的是队列数据结构</li><li>将当前层的节点出队，同时将孩子节点入队</li><li>进入下一轮循环，直到队列为空</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 设置一个计数器，值为某一层节点的数量</span>        <span class="token keyword">let</span> count <span class="token operator">=</span> queue<span class="token punctuation">.</span>length        <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">// 分层，当一层遍历完成后，进入下一次循环（下一层）</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            level<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>   queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>            count<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169.多数元素"></a>169.多数元素</h3><ul><li>摩尔投票算法<ul><li>将第一个数初始化为候选众数（candidate），令 <code>count = 1</code></li><li>遍历 <code>nums</code> 时与 <code>candidate</code> 比较，相同则 <code>count + 1</code>，否则 <code>count - 1</code></li><li>如果 <code>count == 0</code>，更改 <code>candidate</code> 并重新开始计数</li><li>算法的可行性：众数的出现次数大于半数，所以最后的 <code>count</code> 必定大于 0，其他数都会被抵消掉</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">majorityElement</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">===</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            count<span class="token operator">++</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            count<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            count <span class="token operator">=</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141.环形链表"></a>141.环形链表</h3><ul><li>利用快慢指针，慢指针一次走一步，快指针一次走两步</li><li>如果快慢指针相遇，说明链表有环</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> slow <span class="token operator">=</span> fast <span class="token operator">=</span> head    <span class="token keyword">while</span><span class="token punctuation">(</span>slow <span class="token operator">&amp;&amp;</span> fast <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next        <span class="token keyword">if</span><span class="token punctuation">(</span>slow <span class="token operator">===</span> fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="19-删除链表的倒数第N个结点"><a href="#19-删除链表的倒数第N个结点" class="headerlink" title="19.删除链表的倒数第N个结点"></a>19.删除链表的倒数第N个结点</h3><ul><li>设置快慢指针，先让快指针先走 N 步</li><li>然后快慢指针同时往下走，直到快指针到达最后一个结点，此时慢指针为倒数第 N 个结点的前一个结点</li><li>找到前一个结点后，即可删除倒数第 N 个结点</li><li>这里要注意删除第一个结点的特殊情况</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//快慢指针</span><span class="token keyword">function</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span> <span class="token parameter">head <span class="token punctuation">,</span>  n</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">let</span> slow <span class="token operator">=</span> head    <span class="token keyword">let</span> fast <span class="token operator">=</span> head        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token comment">// 删除第1个</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    <span class="token keyword">return</span> head<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h3><ul><li><p>迭代法</p><ul><li>定义三个指针，分别指向当前遍历到的结点 cur、它的前一个结点 pre 及后一个结点 next</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>cur <span class="token operator">=</span> head    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre        pre <span class="token operator">=</span> cur        cur <span class="token operator">=</span> next    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>递归法</p><p>建议看图解演示，更好理解一些</p><blockquote><p><a target="_blank" rel="noopener" href="https://leetcode.cn/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/">https://leetcode.cn/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/</a></p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这里的 cur 指的是最后一个节点</span>    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head  <span class="token comment">// 避免出现环</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> cur <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160.相交链表"></a>160.相交链表</h3><ul><li>设 <code>A</code> 链表头节点到相交处节点的长度为 a，<code>B</code> 链表头节点到相交处节点的长度为 b，相交处节点到尾节点的长度为 c，（a + c）+ b = （b + c）+ a</li><li>设置两个指针，一个从 <code>A</code> 链表头节点开始迭代，另一个从 <code>B</code> 链表头节点开始迭代</li><li>为了使这两个指针走过相同的长度，并在相交的节点上相遇：若有一个指针到达末尾，则将其置为另一个链表的头节点，继续往下走</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> headA    <span class="token keyword">let</span> b <span class="token operator">=</span> headB    <span class="token keyword">while</span><span class="token punctuation">(</span>a <span class="token operator">!==</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> headB <span class="token operator">:</span> a<span class="token punctuation">.</span>next        b <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> headA <span class="token operator">:</span> b<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;刷题计划&quot;&gt;&lt;a href=&quot;#刷题计划&quot; class=&quot;headerlink&quot; title=&quot;刷题计划&quot;&gt;&lt;/a&gt;刷题计划&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;一天坚持刷一道，三个月刷完简单和中等&lt;/li&gt;
&lt;li&gt;刚开始的一个月先把简单刷完，再刷中等难度的&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="笔记" scheme="https://cloudnzk.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="刷题" scheme="https://cloudnzk.github.io/tags/%E5%88%B7%E9%A2%98/"/>
    
    <category term="LeetCode" scheme="https://cloudnzk.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Hingle 主题基础配置&amp;进阶配置</title>
    <link href="https://cloudnzk.github.io/2022/05/20/hexo-hingle-configuration/"/>
    <id>https://cloudnzk.github.io/2022/05/20/hexo-hingle-configuration/</id>
    <published>2022-05-20T13:52:46.000Z</published>
    <updated>2023-06-16T16:58:59.633Z</updated>
    
    <content type="html"><![CDATA[<p>很早之前就喜欢奇妙保罗大佬的 <a target="_blank" rel="noopener" href="https://github.com/Dreamer-Paul/Single">Single</a> 主题，奈何当时只支持 <code>Typecho</code> 而没有 <code>Hexo</code> 版本的，只得作罢。令人惊喜的是，作者本人在2021年又将其移植到 <code>Hexo</code> 中，称为 <a target="_blank" rel="noopener" href="https://github.com/Dreamer-Paul/Hingle">Hingle</a>。</p><blockquote><p>一个简洁大气，含夜间模式的 Hexo 博客模板。</p></blockquote><p>正如其简介所言，<code>Hingle</code> 主题就是那么简约干净，清清爽爽。另外，个人比较喜欢这款主题的配色（蓝色太好看了），还有可爱的二次元风格背景图。以下就是本人搭建好的博客页面，是不是挺简洁美观的~</p><p><img src="https://s2.loli.net/2022/05/20/oBI6S1578WiYf4V.png" alt="Hingle博客预览"></p><p>话不多说，下面就直接开换。さあ、始めよう!</p><h1 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h1><p>在使用这款主题之前，你应该首先安装 <code>Node.js</code>，然后将 <code>Hexo</code> 安装好，并且新建一个 <code>Hexo</code> 博客目录。</p><p>这部分参考一下 <code>Hexo</code> 的 <a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/docs/">官方文档</a> 即可，这里不再赘述。下面简单贴下 <code>Hexo</code> 安装的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -ghexo init blog<span class="token builtin class-name">cd</span> blog<span class="token function">npm</span> <span class="token function">install</span>hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="引入主题"><a href="#引入主题" class="headerlink" title="引入主题"></a>引入主题</h1><p>引入主题也比较简单，按照 <code>Hingle</code> 的 <a target="_blank" rel="noopener" href="https://docs.paul.ren/hingle/#/?id=%e5%ae%89%e8%a3%85">官方文档</a> 一步一步来做：</p><ol><li><p>首先将下载好的主题源码放进 <code>Hexo</code> 根目录的 <code>themes</code> 下，并将文件夹重命名为 <code>hingle</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Dreamer-Paul/Hingle.git<span class="token function">mv</span> Hingle themes/hingle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>然后打开Hexo目录下的 <code>_config.yml</code> 文件，将里面的 <code>theme</code> 字段，更换成 <code>hingle</code> 即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> hingle<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>现在运行 <code>hexo g</code> 和 <code>hexo s</code> 指令，然后在浏览器打开 <code>http://localhost:4000/</code>，可以看到主题已经引入成功了。</p><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><p>以下是主题的基本配置过程，如没有特别说明，<code>_config.yml</code> 文件都指的是主题目录下的配置文件。</p><h2 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h2><p>将默认的信息改成你自己的就行，个人信息会在文章末尾显示。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token string">'Hingle'</span> <span class="token comment"># 作者名称</span><span class="token key atrule">author_avatar</span><span class="token punctuation">:</span> <span class="token string">'https://sdn.geekzu.org/avatar/d22eb460ecab37fcd7205e6a3c55c228?s=200&amp;r=X&amp;d='</span> <span class="token comment"># 作者头像</span><span class="token key atrule">author_text</span><span class="token punctuation">:</span> <span class="token string">'请在这里设置你的作者信息'</span> <span class="token comment"># 作者信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="主页社交链接"><a href="#主页社交链接" class="headerlink" title="主页社交链接"></a>主页社交链接</h2><p><code>icon</code> 代表的是 <a target="_blank" rel="noopener" href="https://fontawesome.com/v4/icons/">font awesome 4</a> 中的图标名</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">social</span><span class="token punctuation">:</span> <span class="token comment"># 社交链接</span>  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'Github'</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'github'</span>    <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'https://github.com/cloudnzk'</span>  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'首页'</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'home'</span>    <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'https://silentlight.vercel.app/'</span>  <span class="token punctuation">-</span> <span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token string">'音乐'</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> <span class="token string">'music'</span>    <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">'https://music.163.com/#/user/home?id=81845106'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h2><p>要启用背景图，去掉 <code>background</code> 前的注释即可。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">background</span><span class="token punctuation">:</span> <span class="token string">'https://api.paugram.com/wallpaper?source=gh'</span> <span class="token comment"># 主题背景</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="关于页面"><a href="#关于页面" class="headerlink" title="关于页面"></a>关于页面</h2><p>现在点击导航栏上的 <code>关于我</code>，会显示 <code>404 not found</code>，因为关于页面还没有被创建出来。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span> <span class="token comment"># 页眉菜单项目</span>  <span class="token key atrule">'关于'</span><span class="token punctuation">:</span> /about  <span class="token key atrule">'朋友们'</span><span class="token punctuation">:</span> /friends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建一个关于的独立页面即可，但需要注意一下页面的路径，要跟 <code>_config.yml</code> 文件中 <code>menu</code> 配置的路径对应上。以下指令是在 <code>about</code> 路径下创建一个名为 <code>index.md</code> 的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page --path about/index <span class="token string">"About me"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="favicon图标更换"><a href="#favicon图标更换" class="headerlink" title="favicon图标更换"></a>favicon图标更换</h2><p>找到 <code>~/blog/themes/hingle/source/static/img</code> 路径下的 <code>icon.png</code>，替换成自己的即可。如果不显示新的 favicon 图标，可以强制刷新一下页面，或者清理一下浏览器的缓存。</p><p>至此，<code>Hingle</code> 主题的基本配置就完成了。</p><h1 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h1><h2 id="提高二次元浓度"><a href="#提高二次元浓度" class="headerlink" title="提高二次元浓度"></a>提高二次元浓度</h2><blockquote><p>注意：本节要对 Hingle 主题进行 DIY (<del>大量魔改</del>)，请谨慎使用</p></blockquote><ol><li><p>首页展示动漫经典语录</p><p><img src="https://s2.loli.net/2022/05/20/ikLsA1Vy3rzdj4b.png" alt="动漫语录"></p></li><li><p>展示追番列表</p><p><img src="https://s2.loli.net/2022/05/20/PbLMNU7YurVa5vJ.png" alt="追番列表"></p></li></ol><h3 id="动漫语录"><a href="#动漫语录" class="headerlink" title="动漫语录"></a>动漫语录</h3><p>进入主题目录，找到 <code>layout</code> 目录中的 <code>layout.ejs</code>文件，把以下代码加入到 <code>&lt;/body&gt;</code> 标签之前：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一言<span class="token constant">API</span> Start<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'https://v1.hitokoto.cn?c=a&amp;c=b'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> hitokoto <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hitokoto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hitokoto<span class="token punctuation">.</span>innerText <span class="token operator">=</span> data<span class="token punctuation">.</span>hitokoto <span class="token operator">+</span> <span class="token string">"《"</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>from <span class="token operator">+</span> <span class="token string">"》"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一言<span class="token constant">API</span> End<span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后对同目录的 <code>index.ejs</code> 进行如下修改</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> config<span class="token punctuation">.</span>description <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span> <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 一言 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"hitokoto"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="追番列表"><a href="#追番列表" class="headerlink" title="追番列表"></a>追番列表</h3><ol><li><p>先安装 <a target="_blank" rel="noopener" href="https://github.com/HCLonely/hexo-bilibili-bangumi">hexo-bilibili-bangumi</a> 插件，并进行配置。配置过程省略，请参考文档。</p></li><li><p>配置完成后，记得先拉取番剧数据信息：<code>hexo bangumi -u</code>，然后再 <code>hexo g</code> ，最后会生成一个 <code>bangumi.html</code> 的静态文件。</p></li></ol><p>在第 2 步会出现 <code>hexo g</code> 失败的情况。因为追番页面没有发表时间，所以<code>page.date</code> 为 <code>undefined</code>，调用<code>unix()</code> 方法会出错。根据报错提示，删掉<code>~/blog/themes/hingle/layout</code> 目录下，<code>page.ejs</code> 与 <code>post.ejs</code> 的以下代码可以得到解决。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 删除以下代码&lt;% if (moment().unix() - page.date.unix() &gt;&#x3D; 15552000) &#123; %&gt;&lt;blockquote&gt;这篇文章上次修改于 &lt;%&#x3D; Math.ceil((moment().unix() - page.date.unix()) &#x2F; 86400) %&gt; 天前，可能其部分内容已经发生变化，如有疑问可询问作者。&lt;&#x2F;blockquote&gt;&lt;% &#125; %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成以上两步后，此时我们对追番页的 <code>想看</code>、<code>在看</code>、<code>看过</code> 进行切换时，会默认打开一个新窗口，这是因为 <code>Hingle</code> 默认将文章的所有链接都设置成外链了：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 自动添加外链</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">links</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> l <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ks<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      t<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token string">"_blank"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此，只需要排除掉追番页的链接即可。打开 <code>~/blog/themes/hingle/source/static/</code> 下的 <code>hingle.js</code> 文件，进行如下修改：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 自动添加外链</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">links</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> l <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 排除追番页</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&amp;&amp;</span> l<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'bangumi'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ks<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      t<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token string">"_blank"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="默认夜间模式"><a href="#默认夜间模式" class="headerlink" title="默认夜间模式"></a>默认夜间模式</h2><p>编辑 <code>themes/hingle/layout/</code> 文件夹下的 <code>layout.ejs</code>，在 <code>&lt;body&gt;</code> 标签上添加 <code>dark-theme</code> 的 CSS 样式即可</p><p><img src="https://s2.loli.net/2022/12/02/zGiNFTfoAe9uSkj.png"></p><p>现在 <code>Hingle</code> 的夜间模式切换有点问题，等作者啥时候有空修复一下吧 </p><h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><p>下面提供了我的整套白嫖方案，具体的步骤可搜索网络的教程解决，在此不再赘述</p><ul><li>首先将博客托管到 <code>vercel</code> 上。在 <code>vercel</code> 的 Dashboard 中导入 <code>GitHub</code> 中的博客仓库，并一键部署</li></ul><p><img src="https://s2.loli.net/2022/05/20/1d6crCWAEZMXfB7.png" alt="vercel部署"></p><ul><li><p>遗憾的是，<code>vercel</code> 现在的域名在国内无法访问。因此需要在 <code>Freenom</code> 上申请一个免费域名</p></li><li><p>然后在 <code>Cloudflare</code> 上配置一下域名的 <code>DNS</code> 解析。这样 <code>DNS</code> 解析时就通过<code>Cloudflare</code> 做了一层代理，使我们的域名能够在国内访问</p><pre class="line-numbers language-none"><code class="language-none">A记录地址：76.76.21.98CNAME 记录地址：cname-china.vercel-dns.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="谷歌、百度收录"><a href="#谷歌、百度收录" class="headerlink" title="谷歌、百度收录"></a>谷歌、百度收录</h2><p>让谷歌、百度收录你的网站，让别人能搜索到你的文章</p><h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h3><ol><li><p>生成 <code>sitemap.xml</code> 站点地图</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save<span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中加入以下配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> sitemap.xml<span class="token key atrule">baidusitemap</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidusitemap.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后用 <code>hexo g</code> 即可生成站点地图，可以看到 <code>public</code> 目录下多出了两个 <code>XML</code> 文件：<code>sitemap.xml</code> 和 <code>baidusitemap.xml</code></p></li><li><p>到<a target="_blank" rel="noopener" href="https://search.google.com/search-console/about">Google Search Console</a>进行验证，选择网址前缀验证，输入 <code>vercel</code> 分配的博客域名，点击继续</p><p><img src="https://s2.loli.net/2022/05/20/FMB1J2drjYuIsqU.png" alt="谷歌验证"></p></li><li><p>将下载好的 <code>HTML</code> 文件放到主题的 <code>source</code> 目录下</p></li><li><p>提交 <code>sitemap.xml</code> 站点地图</p><p><img src="https://s2.loli.net/2022/05/20/tjaEHSU1qfLZnis.png" alt="谷歌地图"></p></li></ol><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><ol><li>到 <a target="_blank" rel="noopener" href="https://ziyuan.baidu.com/">百度搜索资源平台</a> 添加博客域名，然后验证，验证方式跟上面谷歌的差不多</li><li>将下载好的 <code>HTML</code> 文件放到主题的 <code>source</code> 目录下</li><li>提交 <code>baidusitemap.xml</code> 站点地图</li></ol><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><p>在 <code>Hexo</code> 根目录下的 <code>_config.yml</code> 文件中配置 <code>description</code> 和 <code>keywords</code> 选项。以我的配置为例：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Site</span><span class="token key atrule">title</span><span class="token punctuation">:</span> Silentlight's blog<span class="token key atrule">subtitle</span><span class="token punctuation">:</span> <span class="token string">'正视自己的弱小，方能变得更加强大'</span><span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">'Silentlight的个人小站：一个基于Hexo搭建、使用Hingle主题的静态博客；主要记录我的前端、科研笔记，生活所思所想等'</span><span class="token key atrule">keywords</span><span class="token punctuation">:</span> 前端<span class="token punctuation">,</span>生活<span class="token punctuation">,</span>科研<span class="token punctuation">,</span>笔记<span class="token key atrule">author</span><span class="token punctuation">:</span> Silentlight<span class="token key atrule">language</span><span class="token punctuation">:</span> zh<span class="token punctuation">-</span>CN<span class="token key atrule">timezone</span><span class="token punctuation">:</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="bug-修复"><a href="#bug-修复" class="headerlink" title="bug 修复"></a>bug 修复</h1><blockquote><p>以下两个bug，作者均已修复，可更新到最新版本使用</p></blockquote><h2 id="font-awesome-图标丢失"><a href="#font-awesome-图标丢失" class="headerlink" title="font-awesome 图标丢失"></a>font-awesome 图标丢失</h2><p>2022.11月回来看自己的博客，发现博客的图标全部消失了。F12 打开 Chrome 开发者工具看了下，博客的图标是使用的是 font-awesome，于是推测是引入方面出了问题。</p><p><img src="https://s2.loli.net/2022/11/29/zND4lWicoSa5IPm.png"></p><p>经过一步步排查，原来是 font-awesome 的 CDN 无效了，需要更新 CDN 链接。</p><p>解决办法：编辑 <code>themes/hingle/layout/_partial</code> 文件夹下的 <code>head.ejs</code>，修改 font-awesome 的 CDN 链接为 <code>https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css</code></p><p><img src="https://s2.loli.net/2022/11/29/lxYBKVIHwq6JFhu.png"></p><h2 id="标签页显示“没有标题”解决"><a href="#标签页显示“没有标题”解决" class="headerlink" title="标签页显示“没有标题”解决"></a>标签页显示“没有标题”解决</h2><p>打开 <code>~/blog/themes/hingle/layout/_partial</code> 下的 <code>head.ejs</code> 文件，找到下面几行</p><pre class="line-numbers language-none"><code class="language-none">else if(is_post() &amp;&amp; page.title)&#123;title &#x3D; page.title;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在后面加上以下代码，增加对独立页面的判断与标题赋值</p><pre class="line-numbers language-none"><code class="language-none">else if(is_page() &amp;&amp; page.title)&#123;title &#x3D; page.title;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a target="_blank" rel="noopener" href="https://hexo.io/zh-cn/">Hexo官方文档</a></li><li><a target="_blank" rel="noopener" href="https://docs.paul.ren/hingle/#/">Hingle主题官方文档</a></li><li><a target="_blank" rel="noopener" href="https://blog.csdn.net/victoryxa/article/details/104286446">Hexo博客添加一言</a></li><li><a target="_blank" rel="noopener" href="https://www.hansion.win/2020/04/13/hexo-bo-ke-deng-jing-tai-wang-ye-ti-jiao-bai-du-he-google-gu-ge-shou-lu/#toc-heading-2">Hexo博客等静态网页提交百度和Google谷歌收录</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;很早之前就喜欢奇妙保罗大佬的 &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/Dreamer-Paul/Single&quot;&gt;Single&lt;/a&gt; 主题，奈何当时只支持 &lt;code&gt;Typecho&lt;/code&gt;</summary>
      
    
    
    
    <category term="教程" scheme="https://cloudnzk.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="Hexo" scheme="https://cloudnzk.github.io/tags/Hexo/"/>
    
    <category term="Hingle" scheme="https://cloudnzk.github.io/tags/Hingle/"/>
    
    <category term="博客搭建" scheme="https://cloudnzk.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    <category term="主题配置" scheme="https://cloudnzk.github.io/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>重拾Hexo博客，谈谈感想</title>
    <link href="https://cloudnzk.github.io/2022/05/20/return-hexo/"/>
    <id>https://cloudnzk.github.io/2022/05/20/return-hexo/</id>
    <published>2022-05-20T01:24:08.000Z</published>
    <updated>2022-05-21T12:04:28.507Z</updated>
    
    <content type="html"><![CDATA[<p>从2018年开始，玩<code>Hexo</code>博客大概快有4年了。期间也更换过不少的<code>Hexo</code>主题，比如<a target="_blank" rel="noopener" href="https://github.com/theme-next/hexo-theme-next">Next</a>、<a target="_blank" rel="noopener" href="https://github.com/volantis-x/hexo-theme-volantis">Volatis</a>、<a target="_blank" rel="noopener" href="https://github.com/Molunerfinn/hexo-theme-melody">Melody</a>、<a target="_blank" rel="noopener" href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>、<a target="_blank" rel="noopener" href="https://github.com/honjun/hexo-theme-sakura">Sakura</a>、<a target="_blank" rel="noopener" href="https://github.com/amehime/hexo-theme-shoka">Shoka</a>等主题。那时候的我追求的是花里胡哨的界面，以及集成一大堆可有可无的功能，结果到头来，写博客的事情一次都没坚持下来。现在仔细想来，博客的文章质量与阅读体验不正是最基本的要求么，一味地追求花里胡哨的东西不但使得博客可读性变低，还拖慢了加载速度。</p><p>直到在<code>Hexo</code>的主题列表上发现了<code>Hingle</code>这个简约干净的主题，又让我燃起了写博客的兴致。在这里，你只需要专注于写作就够了，其余的什么都不用管。就像是，在体验过花花世界之后，才察觉到简约之美，正所谓返璞归真，大道至简是也。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;从2018年开始，玩&lt;code&gt;Hexo&lt;/code&gt;博客大概快有4年了。期间也更换过不少的&lt;code&gt;Hexo&lt;/code&gt;主题，比如&lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://github.com/theme-next</summary>
      
    
    
    
    <category term="随笔" scheme="https://cloudnzk.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Hexo" scheme="https://cloudnzk.github.io/tags/Hexo/"/>
    
    <category term="感悟" scheme="https://cloudnzk.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>如何读文献</title>
    <link href="https://cloudnzk.github.io/2022/01/16/read-paper-experience/"/>
    <id>https://cloudnzk.github.io/2022/01/16/read-paper-experience/</id>
    <published>2022-01-16T08:17:11.000Z</published>
    <updated>2023-06-16T14:43:56.420Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2023/06/16/JDSPTj1WrdZqlzB.png" alt="读文献"></p><h2 id="文献检索"><a href="#文献检索" class="headerlink" title="文献检索"></a>文献检索</h2><h3 id="在哪找文献"><a href="#在哪找文献" class="headerlink" title="在哪找文献"></a>在哪找文献</h3><ul><li><p>中文论文</p><ul><li><p>1.知网（推荐）</p><ul><li>博硕论文</li><li>可通过云大图书馆免费下载论文</li></ul></li><li><p>2.百度学术</p><ul><li>知网找不到的中文论文来这找</li></ul></li></ul></li><li><p>英文论文</p><ul><li>谷歌学术</li><li>可通过谷歌学术镜像访问，建议访问原网站</li></ul></li><li><p>其他渠道</p><ul><li><p>1.综述论文下面引用的那些文献</p></li><li><p>2.GitHub、公众号、知乎、blog上的论文列表</p><p><a target="_blank" rel="noopener" href="https://github.com/THUNLP-MT/MT-Reading-List#meta_learning">https://github.com/THUNLP-MT/MT-Reading-List#meta_learning</a></p></li></ul></li></ul><h3 id="谷歌学术检索技巧"><a href="#谷歌学术检索技巧" class="headerlink" title="谷歌学术检索技巧"></a>谷歌学术检索技巧</h3><ul><li><p>关键词搜索</p><ul><li>根据研究问题，想出几个关键词；用空格分开组合搜索</li></ul></li><li><p>按日期筛选</p><ul><li>查找近年来的最新文献</li></ul></li><li><p>高级搜索</p><ul><li>精确搜索，结果更准确</li></ul></li><li><p>相关文章</p><ul><li>找到类似的文献</li></ul></li><li><p>被引用次数</p><ul><li>看其他文献怎么评论该文献</li></ul></li></ul><h2 id="文献管理"><a href="#文献管理" class="headerlink" title="文献管理"></a>文献管理</h2><h3 id="Endnote基本使用"><a href="#Endnote基本使用" class="headerlink" title="Endnote基本使用"></a>Endnote基本使用</h3><p>软件包分享，需要校内IP下载</p><ul><li><p>从谷歌学术导入文献</p></li><li><p>关联PDF文件</p><ul><li>以后读文献、高亮文献都从Endnote打开，统一管理</li></ul></li><li><p>文献分类</p><ul><li>建立索引，方便查找</li><li>集中时间看同一类的论文，便于比较</li></ul></li><li><p>一句话总结这篇文献，方便下次阅读</p></li></ul><h3 id="文献同步"><a href="#文献同步" class="headerlink" title="文献同步"></a>文献同步</h3><ul><li><p>登录Endnote账号同步</p></li><li><p>百度网盘工作空间同步</p><ul><li>同步Endnote存文献的那个文件夹</li></ul></li><li><p>GitHub Desktop</p></li></ul><h2 id="文献阅读"><a href="#文献阅读" class="headerlink" title="文献阅读"></a>文献阅读</h2><h3 id="知云划线翻译"><a href="#知云划线翻译" class="headerlink" title="知云划线翻译"></a>知云划线翻译</h3><ul><li>选有道或者谷歌医学引擎</li><li>阅读的过程中高亮重要句子</li></ul><h3 id="阅读顺序：摘要、结论、引言、讨论、结果和方法"><a href="#阅读顺序：摘要、结论、引言、讨论、结果和方法" class="headerlink" title="阅读顺序：摘要、结论、引言、讨论、结果和方法"></a>阅读顺序：摘要、结论、引言、讨论、结果和方法</h3><h3 id="先泛读，然后选择重要的文献精读"><a href="#先泛读，然后选择重要的文献精读" class="headerlink" title="先泛读，然后选择重要的文献精读"></a>先泛读，然后选择重要的文献精读</h3><ul><li>在Endnote分组：重要/有些重要/不重要</li></ul><h2 id="文献笔记"><a href="#文献笔记" class="headerlink" title="文献笔记"></a>文献笔记</h2><h3 id="为什么要记笔记"><a href="#为什么要记笔记" class="headerlink" title="为什么要记笔记"></a>为什么要记笔记</h3><ul><li>1.需要重复阅读某篇文章时。提高阅读文献的效率，减少重复工作</li><li>2.读完某篇文章的思考和收获，文章有哪些点可以借鉴</li><li>建议重要的文章记下笔记，不重要的高亮一下就行了</li></ul><h3 id="建立知识库"><a href="#建立知识库" class="headerlink" title="建立知识库"></a>建立知识库</h3><ul><li>Notion（推荐）</li><li>Excel表格（推荐）</li><li>GitHub repo</li></ul><h3 id="将高亮的句子全部翻译为中文"><a href="#将高亮的句子全部翻译为中文" class="headerlink" title="将高亮的句子全部翻译为中文"></a>将高亮的句子全部翻译为中文</h3><ul><li>总结与归纳，记下要点：根据句子翻译提炼重点</li><li>同时记录读这篇文章的体会、想法，或者与其他文献的关联比较，或者该文献的亮点与不足等</li></ul><h3 id="每个分类单独开一个文件或表格记录笔记"><a href="#每个分类单独开一个文件或表格记录笔记" class="headerlink" title="每个分类单独开一个文件或表格记录笔记"></a>每个分类单独开一个文件或表格记录笔记</h3><ul><li>便于比较和分析</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2023/06/16/JDSPTj1WrdZqlzB.png&quot; alt=&quot;读文献&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;文献检索&quot;&gt;&lt;a href=&quot;#文献检索&quot; class=&quot;headerlink&quot; title=&quot;文献检索</summary>
      
    
    
    
    <category term="经验" scheme="https://cloudnzk.github.io/categories/%E7%BB%8F%E9%AA%8C/"/>
    
    
    <category term="科研" scheme="https://cloudnzk.github.io/tags/%E7%A7%91%E7%A0%94/"/>
    
    <category term="研究生" scheme="https://cloudnzk.github.io/tags/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
    <category term="论文" scheme="https://cloudnzk.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cloudnzk.github.io/2019/03/09/hello-world/"/>
    <id>https://cloudnzk.github.io/2019/03/09/hello-world/</id>
    <published>2019-03-08T16:00:00.000Z</published>
    <updated>2023-06-16T14:44:57.641Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a target="_blank" rel="noopener" href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a target="_blank" rel="noopener" href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a target="_blank" rel="noopener" href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a target="_blank" rel="noopener" href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a target="_blank" rel="noopener" href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a target=&quot;_blank&quot; rel=&quot;noopener&quot; href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a target=&quot;_blank&quot; rel</summary>
      
    
    
    
    
  </entry>
  
</feed>
